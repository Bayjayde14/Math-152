{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/Bayjayde14/Math-152/blob/main/Notebook%204%20-%20github\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DxdHENj6G5z_"
      },
      "source": [
        "# Part 4:  Introduction to NumPy and Visualization\n",
        "\n",
        "Python lists -- objects of type `list` -- are flexible containers for all sorts of data.  They can hold numbers, strings, even other lists.  Python excels at list slicing, whereby one can examine and move and write entire \"slices\" of a list at once.  Lists are emblematic of Pythonic elegance.\n",
        "\n",
        "[NumPy](http://www.numpy.org/) (and it's relative SciPy) are packages for numerical and scientific computation in Python.  These packages extend the capability of Python by defining new types which are highly optimized for floating-point and fixed-size integer computation.  They also extend the capability of Python by introducing new list-like types that allow multi-dimensional arrays (like matrices) and allow \"broadcasting\" -- the seemingly-simultaneous application of functions to all terms of such an array.\n",
        "\n",
        "Here we will introduce computation with NumPy.  Since we will be working with large arrays of data, we will also introduce a few techniques for data visualization, using [MatPlotLib](https://matplotlib.org/) (for standard types of graphs) and [Pillow](https://python-pillow.org/) (for low-level graphics manipulation)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Xs-ILBNLG50C"
      },
      "source": [
        "## Introduction to NumPy\n",
        "\n",
        "To get started, we load the numpy package with the `import numpy as np` command.  This means that all numpy functions will be accessible in the form `np.<function>`.  For example, if we want to compute the square root of a number, using the numpy function, we would call it with `np.sqrt`.\n",
        "\n",
        "To learn more about NumPy, get started with the [NumPy basics documentation](https://docs.scipy.org/doc/numpy/user/basics.html)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "FlPExeaJG50D"
      },
      "outputs": [],
      "source": [
        "import numpy as np "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "PfPgOZNXG50D",
        "outputId": "6430de6a-8dd3-477d-85a7-e2003d004c44"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "3.1622776601683795"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "np.sqrt(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XkIhqenVG50E"
      },
      "source": [
        "### NumPy numerical types and \"universal\" functions (ufuncs)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "id": "q2hpV5uhG50E",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "31292edd-9eb5-4998-e2fc-68f11862aec3"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.float64"
            ]
          },
          "metadata": {},
          "execution_count": 3
        }
      ],
      "source": [
        "type(np.sqrt(10))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AQL642wUG50E"
      },
      "source": [
        "You'll notice right away that numpy has its own types.  The above command should output something like `numpy.float64` or `numpy.float32` (probably the first).  These are floating-point numbers (i.e., approximations of real numbers) which occupy 64 or 32 bits, depending on your computer (or Google's computers, if running on Colab).  The standard numerical types in NumPy are described [in the documentation](https://docs.scipy.org/doc/numpy/user/basics.types.html).  \n",
        "\n",
        "By using specialized numerical types, NumPy is able to take advantage of your computer hardware, which is optimized for arithmetic on certain kinds of numbers.  NumPy types are typically a bit less flexible than pure Python types, e.g., you won't find an \"adjustable\" `int` type.  But for intensive computations, the reduction of flexibility is outweighed by the speed and memory improvements.\n",
        "\n",
        "You can create a variable of a certain numpy type with a command of the form `x = np.<type>(something)`.  For example, let's create a numpy float from scratch."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "id": "haiGvuiSG50E"
      },
      "outputs": [],
      "source": [
        "x = np.float64(3.14) # Not just a float... a numpy-float."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "id": "WrlJojzPG50F",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7f7941fd-dcfc-4da6-da7a-61f2a888586f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "93174.3733866435\n"
          ]
        }
      ],
      "source": [
        "print(x**10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "id": "sMoTyrkjG50F",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "cb803dc2-a2db-4aa3-afc5-a080682e56cf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.float64"
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "type(x**10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S5Fmdh-bG50F"
      },
      "source": [
        "This is useful, if we want to tell our computer explicitly to use numpy for some computations instead of using the Python defaults.  But beware that types can be restrictive -- this is a good thing, in practice, but takes some getting used to.\n",
        "\n",
        "We will be using the type `uint8` type a bit later.  This stands for 8-bit *unsigned* integers.  These are non-negative integers that can be encoded with 8 bits of information, i.e., whose binary expansion has eight ones and zeros.  For example, the 8-bit binary expression 10101010 stands for the integer 128+32+8+2 = 170.  Note that 8 bits = 1 byte... so each uint8 occupies one byte of memory.  \n",
        "\n",
        "An 8-bit unsigned integer can represent integers between 0 and 255 (inclusive).  If your computations exceed this range, then a warning/error will result!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "id": "KYbH9d-9G50F"
      },
      "outputs": [],
      "source": [
        "n = np.uint8(137) # n is an 8-bit unsigned integer."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "id": "P1iN1H9AG50F",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "01b0df64-767b-44a9-dad6-6d4293705e3c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'0b10001001'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "bin(n) # The bits of n are in the string below, after the '0b'.  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 9,
      "metadata": {
        "id": "6VxxehF2G50G",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a9002004-16c0-44e6-b26f-dcb09379a0f9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "137\n"
          ]
        }
      ],
      "source": [
        "print(n)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 11,
      "metadata": {
        "id": "xwiiYIZHG50G",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e8709378-70d0-4c51-8bfa-263e93027b8a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "81\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-11-f4fababb22e9>:1: RuntimeWarning: overflow encountered in ubyte_scalars\n",
            "  print(n*n) # Uh oh overflow.\n"
          ]
        }
      ],
      "source": [
        "print(n*n) # Uh oh overflow."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YhWxBx6GG50G"
      },
      "source": [
        "These kind of restrictions are good and bad.  The bad is that more error messages will pop out and sometimes crash your functions.  Overflows can lead to *wrong* outputs.  The good is that you will be able to harness your computer's processor more effectively, and you will be forced to program more carefully.\n",
        "\n",
        "NumPy also comes with some familiar constants:  $e$, $\\pi$, and Euler's $\\gamma$ (which you approximated before)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 12,
      "metadata": {
        "id": "CGNI-a7DG50G",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "10c91a00-017c-4f6f-91f4-59712e6cd329"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.718281828459045\n"
          ]
        }
      ],
      "source": [
        "print(np.e)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 14,
      "metadata": {
        "id": "QMvHz4nVG50G",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6db9d7fa-fd7a-41a4-9817-7e885517dfe7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "3.141592653589793\n"
          ]
        }
      ],
      "source": [
        "print(np.pi)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 15,
      "metadata": {
        "id": "Yx2vgQLSG50G",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f6ee5923-fb0a-40d6-9314-7b25f5756b28"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "0.5772156649015329\n"
          ]
        }
      ],
      "source": [
        "print(np.euler_gamma) # The harmonic sum minus the logarithm, remember?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zSWZRHP3G50H"
      },
      "source": [
        "NumPy also comes with a zoo of highly optimized, \"broadcastable\" (we'll see what this means soon) functions.  Examples include square roots, trig functions, exponentials and logarithms, GCD, and more.  A nice list of these \"universal functions\" is [in the documentation](https://docs.scipy.org/doc/numpy/reference/ufuncs.html#math-operations)."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 16,
      "metadata": {
        "id": "oFz-Pg4aG50H",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9b2923eb-39af-451b-d95e-46bef764818d"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7071067811865475"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "np.sin(np.pi / 4) # What will this be?  Remember precalculus?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "id": "U9wfP0R-G50H",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ab27f78c-a2f7-4005-ccfc-d00de1c9f292"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7071067811865476"
            ]
          },
          "metadata": {},
          "execution_count": 17
        }
      ],
      "source": [
        "np.sqrt(2) / 2 # For comparison.  Note the little deviation from above... these can add up!!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 18,
      "metadata": {
        "id": "SAM1qy_iG50H",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8ad033d6-ffdf-441d-8b44-be88474769e5"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7853981633974483"
            ]
          },
          "metadata": {},
          "execution_count": 18
        }
      ],
      "source": [
        "np.arctan(1) # The arctangent, or inverse tangent function"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 19,
      "metadata": {
        "id": "Rzxk9OWlG50H",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "258bd2bd-917a-4e5c-bcdb-351370293669"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "0.7853981633974483"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "np.pi / 4"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 20,
      "metadata": {
        "id": "9vw840QfG50H",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ab66bbf6-bef5-49fa-8ca6-95224b225110"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "5.0"
            ]
          },
          "metadata": {},
          "execution_count": 20
        }
      ],
      "source": [
        "np.hypot(3,4) # Guess what this does!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zYtuGB3sG50I"
      },
      "source": [
        "### Python arrays\n",
        "\n",
        "So far, we have seen that NumPy extends Python with more types for numbers, more constants, and more functions.  This is all useful, especially for math and science applications.  But the place where NumPy really offers a big improvement is in its handling of arrays.\n",
        "\n",
        "A NumPy array is like a Python list... but less flexible in its contents, more flexible in its shape and size, and much more efficient for large-scale computations.  Let's begin by doing things that we know for lists, just within NumPy arrays instead."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 21,
      "metadata": {
        "id": "braipmb9G50I",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e199893-2277-4143-fdad-c0f18001e74d"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 1  2  3  4  5  6  7  8  9 10]\n"
          ]
        }
      ],
      "source": [
        "L = np.array([1,2,3,4,5,6,7,8,9,10]) # Make a NumPy array from a list of numbers.\n",
        "print(L) # Looks like a list."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 22,
      "metadata": {
        "id": "bplXlKrSG50I",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d8838464-340b-4222-d03f-e67673210856"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n"
          ]
        }
      ],
      "source": [
        "print([1,2,3,4,5,6,7,8,9,10]) # But a Python list is printed with commas."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 23,
      "metadata": {
        "id": "G8rpAI6VG50I",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5d261aa3-5a28-4003-f502-199d443c128c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1\n"
          ]
        }
      ],
      "source": [
        "print(L[0])  # NumPy arrays are indexed like plain-Python arrays.  Start at zero."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 24,
      "metadata": {
        "id": "-c82_FLbG50I",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "83e70051-f86d-41c6-a097-711e301901c1"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10\n"
          ]
        }
      ],
      "source": [
        "print(L[-1]) # Familiar Python indexing tricks are supported."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 25,
      "metadata": {
        "id": "tynZI_jEG50I",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "90cc493b-1197-43f0-b6a4-383785c99774"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {},
          "execution_count": 25
        }
      ],
      "source": [
        "type(L) # But really, L is not a list!  It's a numpy.ndarray"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 26,
      "metadata": {
        "id": "AFopmu7mG50J",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "987e55a5-774a-48af-9dc6-179e3c3b54af"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.int64"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ],
      "source": [
        "type(L[0]) # NumPy is treating the terms with numpy types.  int64 is a 64-bit signed integer type."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 27,
      "metadata": {
        "id": "XJYk7ZdxG50J",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1f51c33c-0546-4363-cfa1-5323f62febba"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2 5 8]\n"
          ]
        }
      ],
      "source": [
        "print(L[1::3]) # Python list slices are supported in NumPy arrays."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EJqPCwNKG50J"
      },
      "source": [
        "So far, so good.  The NumPy array looks just like a Python list.  We can slice and access terms in the same way.  The only visible difference so far is that the type is different, using type `numpy.ndarray` for the array and `numpy.int64` for each of the terms.  Here is the [official documentation](https://numpy.org/doc/stable/reference/generated/numpy.ndarray.html) on the `numpy.ndarray` type. \n",
        "\n",
        "Here is where NumPy arrays really start to differ from lists."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 28,
      "metadata": {
        "id": "PHaATagdG50J",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "413ea5d8-1d8d-4b6d-ac60-949e95d13395"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 2,  4,  6,  8, 10, 12, 14, 16, 18, 20])"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ],
      "source": [
        "L + L # What would this do for a list?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 29,
      "metadata": {
        "id": "km0mDD8qG50J",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0cf3b9ff-afcc-467a-8e8d-c7b492d29669"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 7, 14, 21, 28, 35, 42, 49, 56, 63, 70])"
            ]
          },
          "metadata": {},
          "execution_count": 29
        }
      ],
      "source": [
        "7 * L # What would this do for a list?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 30,
      "metadata": {
        "id": "3mf5wWzCG50J",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0de4be29-4dde-4a5b-d468-ccbe73d36e4b"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([  1,   4,   9,  16,  25,  36,  49,  64,  81, 100])"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "L * L # What would this do for a list?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 31,
      "metadata": {
        "id": "vkRj5WjBG50K",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "905d02c1-6b0d-4d07-c851-1ded148f962e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 0.84147098,  0.90929743,  0.14112001, -0.7568025 , -0.95892427,\n",
              "       -0.2794155 ,  0.6569866 ,  0.98935825,  0.41211849, -0.54402111])"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ],
      "source": [
        "np.sin(L) # What would this do for a list?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XZyAmyhaG50K"
      },
      "source": [
        "WOAH!  That's completely different than how lists behave.  These computations indicate an important benefit of NumPy.  NumPy is really really good at doing functions to whole arrays of numbers.  In fact, if you try to operate on NumPy arrays, NumPy will try really hard to do the same function many times -- sometimes it will throw an error, but it is meant to behave well.\n",
        "\n",
        "A tradeoff is that NumPy arrays are less flexible than Python lists.  In particular, items in a NumPy array must *all have the same type*.  For example, consider the array below."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 32,
      "metadata": {
        "id": "VzUACpuMG50K",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0283a859-0ecb-4624-f26c-e206d9d42599"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.0  has type  <class 'numpy.float64'>\n",
            "2.5  has type  <class 'numpy.float64'>\n",
            "3.0  has type  <class 'numpy.float64'>\n"
          ]
        }
      ],
      "source": [
        "M = np.array([1,2.5,3])  # It looks like an int, float, and int.\n",
        "for m in M:\n",
        "    print(m,\" has type \",type(m)) # What do you think this will do?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 33,
      "metadata": {
        "id": "EnrygH9XG50K",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "865bb092-b5a2-4e50-f043-f0de758f682a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 has type  <class 'int'>\n",
            "2.5 has type  <class 'float'>\n",
            "3 has type  <class 'int'>\n"
          ]
        }
      ],
      "source": [
        "N = [1, 2.5, 3]\n",
        "for n in N:\n",
        "    print(n, \"has type \",type(n)) # Plain Python lists are type-flexible."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iPxR4mM3G50K"
      },
      "source": [
        "NumPy will try to *coerce* lists so that all items have the same type.  This can lead to awkward results.  Be careful, and use the `type` command if you're unsure what happened!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 34,
      "metadata": {
        "id": "YxkIMS5AG50K",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "e1e4ac76-437d-4430-90a2-0fbad621da86"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "False has type  <class 'numpy.str_'>\n",
            "2.5 has type  <class 'numpy.str_'>\n",
            "Hello has type  <class 'numpy.str_'>\n"
          ]
        }
      ],
      "source": [
        "O = np.array([False, 2.5, 'Hello']) # NumPy has its own string type too.\n",
        "for o in O:\n",
        "    print(o, \"has type \",type(o))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 35,
      "metadata": {
        "id": "R_T6mGsrHhi2",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ee477214-8871-4d39-fef4-90e2e3a96438"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['False' '2.5' 'Hello']\n"
          ]
        }
      ],
      "source": [
        "print(O) # Look at what numpy has done to O!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 36,
      "metadata": {
        "id": "-yClO2YYG50L",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a24d43a0-d9e3-44b3-bae8-80cf41ea5f75"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-36-9fb7854545ca>:1: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  P = np.array([1, [2,3]]) # NumPy will not be happy with this.\n"
          ]
        }
      ],
      "source": [
        "P = np.array([1, [2,3]]) # NumPy will not be happy with this.  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ao6PS_RnG50L"
      },
      "source": [
        "### Exercises\n",
        "\n",
        "1.  Use an np.array to make an array of square roots of all the numbers from 1 to 100.  The first few should be 1.0, 1.414..., 1.732.  Use the np.sqrt function and arrays, *not* a for or while loop.\n",
        "\n",
        "2.  Now do the same as above, but using plain Python lists.  Use the %timeit tool to compare the speed of the np.array approach with the plain Python approach.\n",
        "\n",
        "3.  If `L` is a list, what do the commands `L+L`, `7*L`, `L*L` produce?  How is this different from the results if `L` were a numpy array?\n",
        "\n",
        "4.  What types get coerced into what other types, when making a numpy array out of a mixed-type list?"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Solutions \n",
        "1. import numpy as np\n",
        "\n",
        "numbers = np.arange(1,101)\n",
        "\n",
        "square_roots = np.sqrt(numbers)\n",
        "\n",
        "print(square_roots[:3])\n",
        "\n",
        "2. As you can see, the NumPy approach is about 5 times faster than the plain Python approach. This is because NumPy is implemented in highly optimized C code, whereas plain Python lists are implemented in pure Python.\n",
        "\n",
        "3. If L is a list, the command L+L produces two copies of the list L together, resulting in a new list that is twice the length of L. The command 7*L creates a new list that consist of seven copies of the list L. The command L*L will result in a Type error because two list can't multiple each other. \n",
        "If L were a numpy array the behavior difference in the commands by with the command L+L it would add the corresponding elements of the two copies of L together, resulting in a new array with the same shape as L. The command 7*L would create an array that consists of 7 times each conponent in the array leaving the array in the same shape as L. The command L*L would multiply the corresponding elements of two elements of two copies of L together, resulting in a new array with the same shape as L.\n",
        "\n",
        "4. The resulting array will have the same type as the list if all of the list's elements share that type.\n",
        "The array that results will have the data type of the floating-point values if the list contains both integer and floating-point numbers.\n",
        "The resulting array will have the data type of the strings if the list consists of both integers and strings.\n",
        "The array that results will have the data type of the strings if the list contains both booleans and strings.\n",
        "The resultant array will have the data type of the integers if the list comprises booleans and integers.\n"
      ],
      "metadata": {
        "id": "2PxCtvoWMvYe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "numbers = np.arange(1,101)\n",
        "square_roots = np.sqrt(numbers)\n",
        "print(square_roots[:3])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oY5GopJdMsgN",
        "outputId": "7740ea4c-8bd6-4355-a048-af249e44b8c4"
      },
      "execution_count": 37,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.         1.41421356 1.73205081]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import math\n",
        "numbers = list(range(1,101))\n",
        "square_roots = [math.sqrt(number) for number in numbers]\n",
        "print(square_roots[:3])"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P_cGeS-rPWR8",
        "outputId": "1f9f3569-ee90-4acc-83ce-217bd8088321"
      },
      "execution_count": 38,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1.0, 1.4142135623730951, 1.7320508075688772]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "import math\n",
        "%timeit np.sqrt(np.arange(1,101))\n",
        "%timeit [math.sqrt(number) for number in range(1,101)]"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1GVRfc1FPw6B",
        "outputId": "c45940f7-c231-4e17-a920-e682e4f532f9"
      },
      "execution_count": 39,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "2.45 µs ± 192 ns per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n",
            "11.9 µs ± 1.73 µs per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "L=[1, 2, 3]\n",
        "arr = np.array([1, 2, 3])\n",
        "print(L+L)\n",
        "print(7*L)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "M-W2iNwLQeOE",
        "outputId": "8eb32fe1-ae9f-4510-ccc3-a7211d81a3d6"
      },
      "execution_count": 41,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1, 2, 3, 1, 2, 3]\n",
            "[1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(L*L)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 158
        },
        "id": "DpQWPJFtRFcN",
        "outputId": "3892e260-7d4d-4b0f-c016-c4f29e9270b3"
      },
      "execution_count": 42,
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-42-dea0f78b1cf5>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mprint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mL\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0mL\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: can't multiply sequence by non-int of type 'list'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(arr+arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VU68P3ANRJa7",
        "outputId": "906c813c-53a8-4ced-f2c6-ae9aaafa0d56"
      },
      "execution_count": 43,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2 4 6]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(7*arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2Tdaj9WjRS0v",
        "outputId": "3ef74dea-8962-4e8c-fc2f-88dfed3aaab1"
      },
      "execution_count": 44,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 7 14 21]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "print(arr*arr)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "P_qLUTjBRadY",
        "outputId": "37d43b79-7e6f-479b-905f-593e7912d933"
      },
      "execution_count": 45,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[1 4 9]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "AxofGzVIG50L"
      },
      "outputs": [],
      "source": [
        "# Use this space to complete the exercises. \n",
        "# Please put each exercise in a separate execution or markdown cell!  "
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "q2FM0Vk8G50L"
      },
      "source": [
        "## Higher-dimensional arrays\n",
        "\n",
        "Lists in Python are \"one-dimensional\".  A list like `L = [1,2,3]` has a zeroth, first, and second item (or \"element\" or \"entry\"), which can be retrieved with `L[0]` or `L[1]` or `L[2]`.  For matrices, or other multidimensional arrangements, one might wish for a list which is \"doubly-indexed\" -- something where the entries would be retrieved with a command like `L[1,2]` (for something in the 1st row and 2nd column).  It's possible to make this work in plain Python by using lists of lists.  For example, if `M = [[1,2],[3,4]]` is a list of lists, then you can retrieve numbers with commands like `M[0][1]`.  But this gets a bit cumbersome and is not optimized for typical operations on matrices.\n",
        "\n",
        "### Making multidimensional arrays\n",
        "\n",
        "NumPy arrays can be, and often are, multidimensional.  In fact, why is the NumPy type called `numpy.ndarray` instead of `numpy.array`?  The `nd` in `ndarray` stands for \"n-D\" or \"n-dimensional\".  Accessing elements and slicing multidimensional arrays takes a bit of practice, and that's what we'll do here."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 46,
      "metadata": {
        "id": "8Hb4SqpzG50L"
      },
      "outputs": [],
      "source": [
        "M = np.array([[1,2,3],[4,5,6]])  # Put a list of lists into an array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 47,
      "metadata": {
        "id": "ohkl10AjG50M",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "16eac125-857f-4f68-945c-52cdde5ecfa5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2 3]\n",
            " [4 5 6]]\n"
          ]
        }
      ],
      "source": [
        "print(M)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sN5IfLnAG50M"
      },
      "source": [
        "If we put a list of lists into an `np.array` then NumPy will try to put it into a single \"multi-dimensional\" array.  Here, NumPy has taken a list of two lists and assembled the items into a two-by-three matrix.  When you use the print command, it will print nicely."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 48,
      "metadata": {
        "id": "PnmUbb-VG50M",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6c27634a-f8b1-48f9-93a0-ced6a456c669"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-48-230213a6541e>:1: VisibleDeprecationWarning: Creating an ndarray from ragged nested sequences (which is a list-or-tuple of lists-or-tuples-or ndarrays with different lengths or shapes) is deprecated. If you meant to do this, you must specify 'dtype=object' when creating the ndarray.\n",
            "  BadM = np.array([[1,2,3],[1,2]])  # Bad idea.\n"
          ]
        }
      ],
      "source": [
        "BadM = np.array([[1,2,3],[1,2]])  # Bad idea."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 49,
      "metadata": {
        "id": "EVDW8gFOG50M",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5c086feb-f6e4-4b83-c720-8ca574eb1bb6"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[list([1, 2, 3]) list([1, 2])]\n"
          ]
        }
      ],
      "source": [
        "print(BadM) # This will not be pretty."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sQ5m0NrVG50M"
      },
      "source": [
        "If your lists don't have the right size to form a matrix, numpy will fail to create a multidimensional array.  It will do its best, but the results won't be pretty!\n",
        "\n",
        "Returning to our nice matrix `M`... just as lists have a single *length* accessed with `len`, multidimensional arrays have a `shape` which describes the number of rows, columns, etc..  This is accessed with the shape *method*."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 50,
      "metadata": {
        "id": "0bdGc2NOG50M",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8fc00dde-3c7d-4b6d-8b0e-5bf77c8031bc"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2 3]\n",
            " [4 5 6]]\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(2, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 50
        }
      ],
      "source": [
        "print(M)\n",
        "M.shape  # shape is an attribute of every matrix.  You don't write shape(M), you write M.shape  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 51,
      "metadata": {
        "id": "UTXJVVAfG50M",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "da514828-6a62-4884-df69-c4abbe764c38"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "tuple"
            ]
          },
          "metadata": {},
          "execution_count": 51
        }
      ],
      "source": [
        "type(M.shape) # We haven't seen this type in a while!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 52,
      "metadata": {
        "id": "TeAShdJCG50N",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4f52b875-2063-432f-e8c4-a8f103452c33"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 2  4  6]\n",
            " [ 8 10 12]]\n"
          ]
        }
      ],
      "source": [
        "print(2*M)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 53,
      "metadata": {
        "id": "FlaNs9_FG50N",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6ed79a71-4e04-4fa6-a959-e419ac8438cf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 1  4  9]\n",
            " [16 25 36]]\n"
          ]
        }
      ],
      "source": [
        "print(M*M)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-jO7OBwmG50N"
      },
      "source": [
        "Basic operations and numpy-enabled functions are \"broadcast\" through higher-dimensional arrays, just like they are through one-dimensional list-like arrays.\n",
        "\n",
        "Sometimes it is useful to create arrays of a given shape that are empty, or full of zeros, or full of ones, or full of a single number, or full of random numbers.  You can read about more ways to create arrays from [the official documentation](https://numpy.org/doc/stable/user/basics.creation.html).  The following examples were taken from [another tutorial](http://cs231n.github.io/python-numpy-tutorial/#scipy-image)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 54,
      "metadata": {
        "id": "0I-GFaj3G50N",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "69c90a0b-5761-45da-dba5-e3ac0dc11742"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0. 0. 0. 0.]\n",
            " [0. 0. 0. 0.]\n",
            " [0. 0. 0. 0.]]\n"
          ]
        }
      ],
      "source": [
        "a = np.zeros((3,4))   # Create an array of all zeros, of the given shape (3 rows, 4 columns)\n",
        "print(a)            "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 55,
      "metadata": {
        "id": "0dgg3QkDG50N",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4d438eae-c9ea-4341-c5c8-6a050a42c77f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1. 1.]\n",
            " [1. 1.]\n",
            " [1. 1.]\n",
            " [1. 1.]]\n"
          ]
        }
      ],
      "source": [
        "b = np.ones((4,2))    # Create an array of all ones, of the given shape.  Note the shape is a tuple.\n",
        "print(b)              "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 56,
      "metadata": {
        "id": "3wiNL_9CG50N",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f8a3447a-684c-4fbc-daf1-d9eb4f0cad36"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[7 7 7 7 7]\n",
            " [7 7 7 7 7]\n",
            " [7 7 7 7 7]]\n"
          ]
        }
      ],
      "source": [
        "c = np.full((3,5), 7)  # Create a constant array, of the given shape and constant.\n",
        "print(c)               "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 57,
      "metadata": {
        "id": "jwkrYAc_G50N",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "edc22078-aa51-48e5-d517-ae3fae66057f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1. 0. 0.]\n",
            " [0. 1. 0.]\n",
            " [0. 0. 1.]]\n"
          ]
        }
      ],
      "source": [
        "d = np.eye(3)         # Create an identity matrix (square) of the given size.\n",
        "print(d)              "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 58,
      "metadata": {
        "id": "pfskGRu9G50O",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9ce96536-1762-4acb-af5f-e6af6d8a84c0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[0.34213566 0.90833311 0.24111835 0.63134129]\n",
            " [0.00337987 0.69218798 0.502      0.91048452]\n",
            " [0.85517083 0.4013469  0.77814647 0.98074036]\n",
            " [0.63684565 0.42166041 0.05117554 0.17466989]]\n"
          ]
        }
      ],
      "source": [
        "e = np.random.random((4,4))  # Create an array filled with random floats between 0 and 1.\n",
        "print(e)               "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 59,
      "metadata": {
        "id": "ngVvQqdMG50O",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "ecbb299e-e6de-4ba6-ae13-da6ceecb82df"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[5 3 1]\n",
            " [3 2 6]\n",
            " [2 4 2]\n",
            " [3 6 1]\n",
            " [5 2 6]]\n"
          ]
        }
      ],
      "source": [
        "f = np.random.randint(1,7,(5,3)) # Roll the dice... an array of random integers between 1 and 6.\n",
        "print(f)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 60,
      "metadata": {
        "id": "oPLVsVKQG50O",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "b078d7ab-d61f-41a3-8086-a4c8c3dcc358"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[[0.96334729 0.89636752]\n",
            "  [0.70047632 0.1389163 ]]\n",
            "\n",
            " [[0.87274318 0.36472349]\n",
            "  [0.6941203  0.14789612]]]\n"
          ]
        }
      ],
      "source": [
        "cube = np.random.random((2,2,2)) # Why stop at 2-dimensional arrays?  Let's make a cube!\n",
        "print(cube)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "IKz4qDEQG50O"
      },
      "source": [
        "NumPy can work with 3-dimensional, 4-dimensional, etc., arrays with ease.  *Printing* high-dimensional arrays on our 2-dimensional computer monitors might not be pretty, but NumPy will do its best.\n",
        "\n",
        "### A random interlude\n",
        "\n",
        "The previous few examples used NumPy's random subpackage -- a series of functions which can be used to generate \"random\" numbers.  There's a whole science to generating \"random\" and [really random](https://en.wikipedia.org/wiki/Hardware_random_number_generator) numbers.  It can be difficult to convince a computer, designed for predictable operations, to produce truly unpredictbale numbers.  In fact, NumPy's random number generator uses the [Mersenne Twister](https://en.wikipedia.org/wiki/Mersenne_Twister) to generate *pseudo-random* numbers.  These are great for most scientific purposes, e.g., for random sampling.  But they are *not* cryptographically secure -- they should be not be used for generating random cryptographic keys to keep your data secure.  \n",
        "\n",
        "Read the [Numpy documentation](https://numpy.org/doc/1.16/reference/routines.random.html) for more about the capabilities of the random subpackage.  Here are a couple examples to give a quick survey."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 61,
      "metadata": {
        "id": "SofAdRCWG50O",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "08744390-849b-4c25-d998-c8cd2df764f4"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([0.41125821, 0.60274636, 0.82216172])"
            ]
          },
          "metadata": {},
          "execution_count": 61
        }
      ],
      "source": [
        "np.random.random(3)  # An array of three numbers, uniformly at random in [0,1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 62,
      "metadata": {
        "id": "MgS7Hk8lG50O",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "84bdcaa7-cf2e-49d4-9560-c91036383797"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([[2, 2, 2, 4, 5],\n",
              "       [6, 4, 3, 1, 1],\n",
              "       [2, 1, 2, 1, 1],\n",
              "       [5, 6, 2, 6, 6],\n",
              "       [3, 1, 2, 6, 5]])"
            ]
          },
          "metadata": {},
          "execution_count": 62
        }
      ],
      "source": [
        "np.random.randint(1, 7, (5,5))  # Twenty-five rolls of the dice (random ints).  Note the list-like bottom/top of range."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 63,
      "metadata": {
        "id": "OyP4-jSFG50O",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d41ce9ef-7174-42bd-cc6d-8bc61b44901c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array(['plum', 'apple', 'banana', 'plum', 'orange', 'banana', 'orange',\n",
              "       'plum', 'plum', 'banana'], dtype='<U6')"
            ]
          },
          "metadata": {},
          "execution_count": 63
        }
      ],
      "source": [
        "np.random.choice(['apple', 'banana', 'orange', 'plum'], 10) # Ten random choices from the list."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 64,
      "metadata": {
        "id": "i2W7sx4uG50O",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c20f5d09-a287-4170-c217-417b173198d1"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "array([ 1.36242687,  0.42866913, -1.84005413,  0.20753967,  1.29614523,\n",
              "        1.60286736, -1.08959715, -0.80257869, -0.15814327, -0.55868082])"
            ]
          },
          "metadata": {},
          "execution_count": 64
        }
      ],
      "source": [
        "np.random.randn(10) # Ten random choices from the *normal* or *Gaussian* distribution, mean 0, std 1."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2fQz10w6G50P"
      },
      "source": [
        "### Accessing and slicing multi-dimensional arrays\n",
        "\n",
        "How do we access the terms of a multi-dimensional array?  Let's return to our 2x3 example."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 65,
      "metadata": {
        "id": "oStMIIcrG50P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5d6c8521-941b-4b2f-950c-2ba5c6e94e59"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2 3]\n",
            " [4 5 6]]\n"
          ]
        }
      ],
      "source": [
        "print(M) # Remember this matrix?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 66,
      "metadata": {
        "id": "ijHduhAxG50P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "03b42383-42fc-47c5-ca6b-b7fcc176bd6b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1 2 3\n"
          ]
        }
      ],
      "source": [
        "print(M[0,0], M[0,1], M[0,2]) # What do you think this will do?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 67,
      "metadata": {
        "id": "Q3OaCet7G50P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "42fb752f-9663-4b8d-e841-0f284361f87b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "4 5 6\n"
          ]
        }
      ],
      "source": [
        "print(M[1,0],M[1,1],M[1,2]) # And this?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "eYe2HMnpG50P"
      },
      "source": [
        "The syntax `M[x,y]` retrieves the value in row #x and column #y, using the Pythonic convention that all numbering starts at zero.  This enables quick access to individual values.  This row-then-column syntax extends to all sorts of array-slicing.  To see this, we begin by creating a bigger matrix.  We'll use the NumPy `reshape` command to take an ordinary 1-dimensional array (the numbers 0...99) and *reshape* this array into a 2-dimensional array with 5 rows and 20 columns."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 68,
      "metadata": {
        "id": "8OGXS_qaG50P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4d3b93aa-e6c0-4571-f20e-e946f9c2bd39"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23\n",
            " 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47\n",
            " 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71\n",
            " 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95\n",
            " 96 97 98 99]\n",
            "[[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n",
            " [20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39]\n",
            " [40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59]\n",
            " [60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79]\n",
            " [80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99]]\n"
          ]
        }
      ],
      "source": [
        "A = np.array(range(100))\n",
        "print(A) # There might seem to be multiple rows, but that's just because A doesn't fit on a single line.\n",
        "B = np.reshape(A,(5,20))\n",
        "print(B) # Notice the extra brackets!  This is a 2-dimensional array, i.e., a matrix."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 69,
      "metadata": {
        "id": "xgoXloAYG50P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "daa84856-eb62-4b92-9c37-02a886cf8152"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n",
            " [20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39]\n",
            " [40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59]\n",
            " [60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79]\n",
            " [80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99]]\n"
          ]
        }
      ],
      "source": [
        "print(B) # The whole matrix."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 70,
      "metadata": {
        "id": "g0eQnCLbG50P",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "eef81181-fb26-4cae-8bcb-c480ae85a415"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39]\n"
          ]
        }
      ],
      "source": [
        "print(B[1,:]) # Row 1.  Column anything."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 72,
      "metadata": {
        "id": "jmvvAphNG50Q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4dce6c4c-f831-4ebd-e13c-f0a03054d664"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[ 2 22 42 62 82]\n"
          ]
        }
      ],
      "source": [
        "print(B[:, 2]) # Column 2.  Row anything. Notice that it's formatted as a 1-dimensional array!  No longer vertical!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 73,
      "metadata": {
        "id": "IVuwLtMxG50Q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "c26d1026-c8d6-4cd8-fefc-e59ebb7783fa"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "numpy.ndarray"
            ]
          },
          "metadata": {},
          "execution_count": 73
        }
      ],
      "source": [
        "type(B[:,2]) # Still a numpy array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 74,
      "metadata": {
        "id": "1HPO8oFQG50Q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3fd58baa-64d1-4ed7-8374-7a848cc7fc6f"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 1  3  5  7  9 11 13 15 17 19]\n",
            " [21 23 25 27 29 31 33 35 37 39]\n",
            " [41 43 45 47 49 51 53 55 57 59]\n",
            " [61 63 65 67 69 71 73 75 77 79]\n",
            " [81 83 85 87 89 91 93 95 97 99]]\n"
          ]
        }
      ],
      "source": [
        "print(B[:, 1::2]) # Every row.  Which columns do you think will be displayed?  Remember start:stop:skip."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 75,
      "metadata": {
        "id": "s-xnNmEqG50Q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "a71b7a5e-ea63-41cc-c56b-7c6d650ba47b"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[23 24]\n",
            " [43 44]\n",
            " [63 64]\n",
            " [83 84]]\n"
          ]
        }
      ],
      "source": [
        "print(B[1:, 3:5]) # Predict what will happen before you run it."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ND6GZDOZG50Q"
      },
      "source": [
        "NumPy has nice commands to operate on rows and columns of arrays."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 76,
      "metadata": {
        "id": "-EealhzXG50Q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "41984853-2dfd-4a97-8b8b-c65ba299ed66"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 0  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19]\n",
            " [20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39]\n",
            " [40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59]\n",
            " [60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79]\n",
            " [80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99]]\n"
          ]
        }
      ],
      "source": [
        "print(B) # Let's just remember what B was."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 77,
      "metadata": {
        "id": "Aoja1sXKG50Q",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "6888151f-d8f7-4495-ca3a-38d43163be0e"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "4950"
            ]
          },
          "metadata": {},
          "execution_count": 77
        }
      ],
      "source": [
        "np.sum(B) # Add up all the terms of B, i.e., 0+1+2+...+99"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 78,
      "metadata": {
        "id": "l7CYab5UG50R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "096e81a0-f168-4481-c9a8-3b053a588136"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[200 205 210 215 220 225 230 235 240 245 250 255 260 265 270 275 280 285\n",
            " 290 295]\n"
          ]
        }
      ],
      "source": [
        "print(np.sum(B, axis=0))  # Try this... what does the result mean?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "zA7ectjuG50R"
      },
      "outputs": [],
      "source": [
        "print(np.sum(B, axis=1))  # And what does this result mean?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 79,
      "metadata": {
        "id": "KA0hJhpIG50R"
      },
      "outputs": [],
      "source": [
        "BigM = np.random.random((1000,1000)) # Just a little array of a million random numbers!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 80,
      "metadata": {
        "id": "DZK-7_MLG50R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "20bf5a69-2c86-446d-fb44-4b621c7e6f30"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "500353.00955142867"
            ]
          },
          "metadata": {},
          "execution_count": 80
        }
      ],
      "source": [
        "np.sum(BigM) # Let's just add up a million random numbers."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 81,
      "metadata": {
        "id": "e_4lIvN2G50R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f9dad506-5b57-4e76-f887-ebd081bbc804"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "657 µs ± 41.5 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"
          ]
        }
      ],
      "source": [
        "%timeit BigM * BigM # Don't print this one."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 82,
      "metadata": {
        "id": "rb4Vcs0BG50R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d0863f89-9a88-4a43-b3cd-f4d18ccf1979"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "264 µs ± 9.82 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"
          ]
        }
      ],
      "source": [
        "%timeit np.sum(BigM)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 83,
      "metadata": {
        "id": "uT6MpLFuG50R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "39e33cb2-3fa0-49ef-d491-c6323b726bdf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "259 µs ± 13.3 µs per loop (mean ± std. dev. of 7 runs, 1000 loops each)\n"
          ]
        }
      ],
      "source": [
        "%timeit np.sum(BigM, axis=0)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i1bfbkmXG50R"
      },
      "source": [
        "The speed of NumPy can be *startling*.  I mean, really really fast.  Really.  Note that a blink of the eye takes about 400 ms.  And there are 1000 µs (microseconds) in 1 ms (millisecond)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kcpLRWMxG50R"
      },
      "source": [
        "### Matrix multiplication\n",
        "\n",
        "One of the most important computations in linear algebra is matrix multiplication.  If $M$ and $N$ are two matrices, and the number of columns of $M$ equals the number of rows of $N$, then it's possible to multiply $M$ and $N$ to obtain a matrix product.  \n",
        "\n",
        "Explicitly, if $P = M \\cdot N$ is a matrix product, then the entries of $P$ are given by the formula,\n",
        "$$P_{ij} = \\sum_k M_{ik} N_{kj}.$$\n",
        "Here, notation like $M_{ik}$ stands for the entry of $M$ at row $i$ and column $k$.\n",
        "\n",
        "Let's begin by doing this *explicitly* for NumPy matrices."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 84,
      "metadata": {
        "id": "YEd7lOvOG50S"
      },
      "outputs": [],
      "source": [
        "def matrix_mult(M,N):\n",
        "    '''\n",
        "    A function to multiply two NumPy matrices.\n",
        "    This is a bit more verbose than necessary, to improve clarity.\n",
        "    '''\n",
        "    Mrows = M.shape[0] # The number of rows of M\n",
        "    Mcols = M.shape[1] # The number of columns of M.\n",
        "    Nrows = N.shape[0] # The number of rows of N.\n",
        "    Ncols = N.shape[1] # The number of columns of N.\n",
        "    if Mcols != Nrows:\n",
        "        raise ValueError('The number of columns and rows do not match.')\n",
        "    P = np.zeros((Mrows,Ncols)) # Initialize the product matrix to all zeros, the right shape.\n",
        "    Prows = Mrows\n",
        "    Pcols = Ncols\n",
        "    for i in range(Prows):\n",
        "        for j in range(Pcols):\n",
        "            # Now we are going to compute P_ij, the entry at row i and column j in the product matrix.\n",
        "            # This is the sum in the above formula.  We set the running total to zero.\n",
        "            S = 0\n",
        "            for k in range(Mcols):\n",
        "                S = S + M[i,k]*N[k,j] # Compare to the formula above!\n",
        "            P[i,j] = S\n",
        "    return P"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 85,
      "metadata": {
        "id": "GR9hWyiyG50S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "d96c9ae7-1422-42cc-e800-99ccdf633764"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[1 2 3]\n",
            " [4 5 6]]\n",
            "[[1 2]\n",
            " [3 4]\n",
            " [5 6]]\n"
          ]
        }
      ],
      "source": [
        "A = np.array([[1,2,3],[4,5,6]])\n",
        "print(A)\n",
        "B = np.array([[1,2],[3,4],[5,6]])\n",
        "print(B)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 86,
      "metadata": {
        "id": "2M94QvgJG50S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1e81c5cd-62c8-4497-9e71-6635747c8aee"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[22. 28.]\n",
            " [49. 64.]]\n"
          ]
        }
      ],
      "source": [
        "print(matrix_mult(A,B)) # Will it work?  Can you predict the shape of the result?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mnKarXi6G50S"
      },
      "source": [
        "It's good to study the code above, to understand how it connects to the definition of matrix multiplication.  But since matrix multiplication comes up so often, the designers of NumPy have implemented a highly optimized version.  This is called `dot`."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 89,
      "metadata": {
        "id": "4zdwlNcWG50S",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "3cd48a2d-8ea2-4e2b-f674-ae4ba918bd50"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[22 28]\n",
            " [49 64]]\n"
          ]
        }
      ],
      "source": [
        "print(np.dot(A,B))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 90,
      "metadata": {
        "id": "e7YswFH_G50S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "36a5c1ff-7c6d-40af-c2c0-fbfc354736d5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "10 µs ± 1.6 µs per loop (mean ± std. dev. of 7 runs, 100000 loops each)\n"
          ]
        }
      ],
      "source": [
        "%timeit matrix_mult(A,B)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 91,
      "metadata": {
        "id": "MUCdKFu_G50S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "0459fb0d-0a86-40c2-feec-ea0046cd90c2"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "1.68 µs ± 164 ns per loop (mean ± std. dev. of 7 runs, 1000000 loops each)\n"
          ]
        }
      ],
      "source": [
        "%timeit np.dot(A,B)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LGXK_6lbG50S"
      },
      "source": [
        "Let's see how the speedup works for bigger matrices... like 100 by 100 matrices with 10000 random floats in each!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 92,
      "metadata": {
        "id": "noU2afJQG50S"
      },
      "outputs": [],
      "source": [
        "A = np.random.random((100,100))\n",
        "B = np.random.random((100,100))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 93,
      "metadata": {
        "id": "uazliR6fG50S",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "59c22e08-2032-43b0-8937-0b65cbe39a3a"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "443 ms ± 4.6 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)\n"
          ]
        }
      ],
      "source": [
        "%timeit matrix_mult(A,B)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 94,
      "metadata": {
        "id": "ulJhtxxaG50T",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "4d60ccb5-4f7a-4168-ffea-455ea252d6bf"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "88 µs ± 22.2 µs per loop (mean ± std. dev. of 7 runs, 10000 loops each)\n"
          ]
        }
      ],
      "source": [
        "%timeit np.dot(A,B) # How about that for a speedup!!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fdj-r-0OG50T"
      },
      "source": [
        "Check the units... how much faster does np.dot run than our basic Python loop implementation?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "fx0ECqIxG50T"
      },
      "source": [
        "### Exercises\n",
        "\n",
        "1.  Put the list of numbers `[1,...,12]` into all possible shapes of 2-dimensional, and 3-dimensional numpy arrays, using the reshape command.  Print the results.  Only try the shapes where all dimensions are greater than one (i.e., don't make a 1 by 12 array).\n",
        "\n",
        "2.  Make a square array containing the numbers `[0,...,99]`.  Use list-slicing syntax to reverse the row-order of this array.  Use list-slicing syntax to *transpose* this array (reflect it across the diagonal of the original).\n",
        "\n",
        "3.  If you roll ten fair 6-sided dice, you expect the total to be 35, on average.  The minimum total would be 10 and the maximum would be 60.  Use numpy to create a array with 50 rows and 10 columns of random dice rolls (random integers between 1 and 6).  By summing rows, create an array of numbers between 10 and 60.  What is the average of this array (a number between 10 and 60)?  What is the standard deviation of this array?  (Use the `np.std` function for standard deviation.)  Use numpy functions throughout -- no loops please!  \n",
        "\n",
        "4.  Define a function `matrix_pow(M,e)` which takes as input a *square* matrix `M` and a natural number `e`.  The output should be the result of matrix multiplication, with `M` multiplied by itself `e` times.  When `e` is zero, the function should output the identity matrix `np.eye(s)` where `s` is the number of rows (or columns) of `M`.\n",
        "\n",
        "5.  The matrix exponential is defined by the same Taylor series as the usual exponential function, but one allows square matrices as inputs instead of just numbers.  Define a function `matrix_exp(M)` which computes the matrix exponential of `M` using the first 20 terms of the (familiar) series, and uses the `matrix_pow` function from the previous question."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Solutions\n",
        "1. import numpy as np\n",
        "\n",
        "arr=np.arange(1,13)\n",
        "\n",
        "*2-dimensional array\n",
        "\n",
        "for i in range(2,7):\n",
        "\n",
        "  if 12 % i == 0:\n",
        "\n",
        "  print(arr.reshape(i, 12//i))\n",
        "\n",
        "*3-dimensional array\n",
        "\n",
        "for i in range(2, 5):\n",
        "\n",
        "  if 12 % i == 0:\n",
        "\n",
        "  for j in range(2, 5):\n",
        "\n",
        "   if 12 % (i*j) == 0:\n",
        "\n",
        "   print(arr.reshape(i, j, 12//(i*j)))\n",
        "\n",
        "2. import numpy as np\n",
        "\n",
        "arr = np.arange(100).reshape(10, 10)\n",
        "\n",
        "print(arr[::-1])\n",
        "\n",
        "print(arr.T)\n",
        "\n",
        "3. Average = 34.26 ; \n",
        "Standard Deviation = 5.878128954012492\n",
        "\n",
        "4. import numpy as np\n",
        "\n",
        "def matrix_pow(M, e):\n",
        "\n",
        "if e == 0:\n",
        "\n",
        "return np.eye(M.shape[0])\n",
        "\n",
        "else:\n",
        "\n",
        "result = M\n",
        "\n",
        "for i in range(e-1):\n",
        "\n",
        "result = np.dot(result, M)\n",
        "\n",
        "return result \n",
        "\n",
        "5. import numpy as np\n",
        "\n",
        "def matrix_exp(M):\n",
        "\n",
        "result = np.eye(M.shape[0])\n",
        "\n",
        "for i in range(1, 21):\n",
        "\n",
        "result += matrix_pow(M, i) / np.math.factorial(i)\n",
        "\n",
        "return result"
      ],
      "metadata": {
        "id": "Lz-uG70iUY0s"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "arr=np.arange(1,13)\n",
        "#2-dimensional array\n",
        "for i in range(2,7):\n",
        "  if 12 % i == 0:\n",
        "    print(arr.reshape(i, 12//i))\n",
        "\n",
        "#3-dimensional array\n",
        "for i in range(2, 5):\n",
        "  if 12 % i == 0:\n",
        "    for j in range(2, 5):\n",
        "      if 12 % (i*j) == 0:\n",
        "        print(arr.reshape(i, j, 12//(i*j)))\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "83_46x_hU0SV",
        "outputId": "961a08ef-ca4d-4dca-d639-09ae5418a152"
      },
      "execution_count": 95,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 1  2  3  4  5  6]\n",
            " [ 7  8  9 10 11 12]]\n",
            "[[ 1  2  3  4]\n",
            " [ 5  6  7  8]\n",
            " [ 9 10 11 12]]\n",
            "[[ 1  2  3]\n",
            " [ 4  5  6]\n",
            " [ 7  8  9]\n",
            " [10 11 12]]\n",
            "[[ 1  2]\n",
            " [ 3  4]\n",
            " [ 5  6]\n",
            " [ 7  8]\n",
            " [ 9 10]\n",
            " [11 12]]\n",
            "[[[ 1  2  3]\n",
            "  [ 4  5  6]]\n",
            "\n",
            " [[ 7  8  9]\n",
            "  [10 11 12]]]\n",
            "[[[ 1  2]\n",
            "  [ 3  4]\n",
            "  [ 5  6]]\n",
            "\n",
            " [[ 7  8]\n",
            "  [ 9 10]\n",
            "  [11 12]]]\n",
            "[[[ 1  2]\n",
            "  [ 3  4]]\n",
            "\n",
            " [[ 5  6]\n",
            "  [ 7  8]]\n",
            "\n",
            " [[ 9 10]\n",
            "  [11 12]]]\n",
            "[[[ 1]\n",
            "  [ 2]\n",
            "  [ 3]\n",
            "  [ 4]]\n",
            "\n",
            " [[ 5]\n",
            "  [ 6]\n",
            "  [ 7]\n",
            "  [ 8]]\n",
            "\n",
            " [[ 9]\n",
            "  [10]\n",
            "  [11]\n",
            "  [12]]]\n",
            "[[[ 1]\n",
            "  [ 2]\n",
            "  [ 3]]\n",
            "\n",
            " [[ 4]\n",
            "  [ 5]\n",
            "  [ 6]]\n",
            "\n",
            " [[ 7]\n",
            "  [ 8]\n",
            "  [ 9]]\n",
            "\n",
            " [[10]\n",
            "  [11]\n",
            "  [12]]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "arr = np.arange(100).reshape(10, 10)\n",
        "print(arr[::-1])\n",
        "print(arr.T)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "rGMJ2CbuWWSj",
        "outputId": "24c00843-c761-43f7-b864-1e5cc9d8325a"
      },
      "execution_count": 96,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[90 91 92 93 94 95 96 97 98 99]\n",
            " [80 81 82 83 84 85 86 87 88 89]\n",
            " [70 71 72 73 74 75 76 77 78 79]\n",
            " [60 61 62 63 64 65 66 67 68 69]\n",
            " [50 51 52 53 54 55 56 57 58 59]\n",
            " [40 41 42 43 44 45 46 47 48 49]\n",
            " [30 31 32 33 34 35 36 37 38 39]\n",
            " [20 21 22 23 24 25 26 27 28 29]\n",
            " [10 11 12 13 14 15 16 17 18 19]\n",
            " [ 0  1  2  3  4  5  6  7  8  9]]\n",
            "[[ 0 10 20 30 40 50 60 70 80 90]\n",
            " [ 1 11 21 31 41 51 61 71 81 91]\n",
            " [ 2 12 22 32 42 52 62 72 82 92]\n",
            " [ 3 13 23 33 43 53 63 73 83 93]\n",
            " [ 4 14 24 34 44 54 64 74 84 94]\n",
            " [ 5 15 25 35 45 55 65 75 85 95]\n",
            " [ 6 16 26 36 46 56 66 76 86 96]\n",
            " [ 7 17 27 37 47 57 67 77 87 97]\n",
            " [ 8 18 28 38 48 58 68 78 88 98]\n",
            " [ 9 19 29 39 49 59 69 79 89 99]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import random\n",
        "import numpy as np\n",
        "rolls = np.random.randint(1,7, size=(50,10))\n",
        "totals = np.sum(rolls, axis=1)\n",
        "print(totals)\n",
        "print(\"Mean of total scores:\", np.mean(totals))\n",
        "print(\"Standard deviation of total scores:\", np.std(totals))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "d5-7-jGoXEoD",
        "outputId": "4c396351-99be-4be1-af56-5146045cd2e3"
      },
      "execution_count": 97,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[38 39 36 29 36 31 44 31 30 31 30 29 34 29 30 38 36 43 33 26 26 24 38 31\n",
            " 42 41 29 21 28 40 36 30 45 36 32 37 30 40 33 38 29 48 32 40 34 38 26 34\n",
            " 45 37]\n",
            "Mean of total scores: 34.26\n",
            "Standard deviation of total scores: 5.878128954012492\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "def matrix_pow(M, e):\n",
        "  if e == 0:\n",
        "    return np.eye(M.shape[0])\n",
        "  else:\n",
        "    result = M\n",
        "    for i in range(e-1):\n",
        "      result = np.dot(result, M)\n",
        "    return result \n",
        "    "
      ],
      "metadata": {
        "id": "sGOaoEPkYAC4"
      },
      "execution_count": 98,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "M = np.array([[1, 2], [3, 4]])\n",
        "print(matrix_pow(M, 3))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ZmzhFl1SYeRn",
        "outputId": "6985b789-f291-445b-bd2a-179c649a6f23"
      },
      "execution_count": 99,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 37  54]\n",
            " [ 81 118]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "def matrix_exp(M):\n",
        "  result = np.eye(M.shape[0])\n",
        "  for i in range(1, 21):\n",
        "    result += matrix_pow(M, i) / np.math.factorial(i)\n",
        "  return result"
      ],
      "metadata": {
        "id": "umIk8xBcZFcE"
      },
      "execution_count": 100,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "M = np.array([[1, 2], [3, 4]])\n",
        "print(matrix_exp(M))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mtcJQy-bZiFx",
        "outputId": "b9a55a79-38cd-4f0d-9305-8051912ba2c6"
      },
      "execution_count": 101,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[ 51.96894293  74.73654523]\n",
            " [112.10481784 164.07376077]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iQZKmbIbG50T"
      },
      "source": [
        "## Introduction to 2-dimensional graphics in Python\n",
        "\n",
        "The visualization of quantitative information is a huge field of study.  The now-classic book in the field is Edward Tufte's [The Visual Display of Quantitative Information](https://www.edwardtufte.com/tufte/books_vdqi), but you can find much earlier works by the best-named statistician [Playfair](https://en.wikipedia.org/wiki/William_Playfair) or the beautiful but vexing *Semiology of Graphics* by Jacques Bertin.\n",
        "\n",
        "In this notebook, we are going to introduce two tools for visualization.  The first is [matplotlib](https://matplotlib.org/), which has the same number of letters and syllables as [manbearpig](https://en.wikipedia.org/wiki/ManBearPig).  Matplotlib is an excellent tool for creating a huge number of \"standard\" graphs and charts.  It works very nicely in Jupyter notebooks, interfaces with numpy, and is very widely supported.\n",
        "\n",
        "The second tool is [Pillow](https://python-pillow.org/) which is the new and fluffy incarnation of PIL, the Python Imaging Library.  We will use Pillow for \"low-level\" 2-dimensional image manipulation.  Pillow is great when we want to create or modify an image pixel-by-pixel.  It's not so great if we just want to make a graph with some dots, lines, axes, and labels.  \n",
        "\n",
        "Other tools worth consideration are:  [SVGwrite](https://pypi.org/project/svgwrite/) for working with scalable vector graphics and [Bokeh](https://bokeh.pydata.org/en/latest/) for making very pretty interactive graphics on the web.  Also [Seaborn](https://seaborn.pydata.org/) for a visualization system based on matplotlib, but with more modern styling.  For producing print-ready graphics, I use a strange combination of Python and [TikZ/PGF](http://www.texample.net/tikz/examples/all/)."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "cagHlDQrG50T"
      },
      "source": [
        "### Introduction to matplotlib\n",
        "\n",
        "Matplotlib can be used to make all sorts of graphs and charts from your data.  Often the best way to use matplotlib is to look at the [matplotlib gallery](https://matplotlib.org/gallery/index.html) and find an example as a starting point.  But it's difficult getting started with matplotlib unless you understand its basic framework.\n",
        "\n",
        "Here we limit ourselves to three fundamental types of visualization in matplotlib:  the [histogram](https://en.wikipedia.org/wiki/Histogram), the [line chart](https://en.wikipedia.org/wiki/Line_chart), and the [scatter plot](https://en.wikipedia.org/wiki/Scatter_plot).  To use matplotlib's plotting capabilities, we load the matplotlib.pyplot package as plt (just as we loaded numpy as np).  The pyplot part of matplotlib is meant to work like Matlab.  You can follow the [official pyplot tutorial](https://matplotlib.org/tutorials/introductory/pyplot.html) for more."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 105,
      "metadata": {
        "id": "MdIVQTnAG50T"
      },
      "outputs": [],
      "source": [
        "import matplotlib.pyplot as plt # Use plt.<command> hereafter."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mC38n2P0G50T"
      },
      "source": [
        "### Scatter plots"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Yx12ZWTAG50T"
      },
      "source": [
        "The *scatter plot* might be the simplest sort of 2-dimensional data visualization.  If your data is a set of ordered pairs $(x,y)$ of numbers, then a scatter plot visualizes this data by putting a dot at every coordinate in the data.  Here is a minimalist example.  Note that the data is organized as *two separate arrays* -- one for the x-coordinates and the other for the y-coordinates.  "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 106,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WI5VgBdWG50U",
        "outputId": "f3b3d9e0-cd6c-4955-a73e-5c59daf8df08"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[10  6  6  8  8  8  7  1 10  4  2  3 10  4  1  3  6  9 10  3]\n",
            "[2 9 9 4 5 7 9 1 1 4 8 4 7 9 8 2 4 5 7 7]\n"
          ]
        }
      ],
      "source": [
        "xlist = np.random.randint(1,11,20) # A list of 20 random numbers between 1 and 10\n",
        "ylist = np.random.randint(1,11,20) # Another such list.\n",
        "print(xlist)\n",
        "print(ylist)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "whG9Jt6HG50U"
      },
      "source": [
        "We are going to use these numbers as the x-coordinates and y-coordinates for a series of dots.  A more explicit description is given by running the cell below.  (Also, a reminder of string formatting!)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 107,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "v99tzXdrG50U",
        "outputId": "6e45c466-fd88-493e-92ee-83c1c77dd559"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(10, 2) will be plotted\n",
            "(6, 9) will be plotted\n",
            "(6, 9) will be plotted\n",
            "(8, 4) will be plotted\n",
            "(8, 5) will be plotted\n",
            "(8, 7) will be plotted\n",
            "(7, 9) will be plotted\n",
            "(1, 1) will be plotted\n",
            "(10, 1) will be plotted\n",
            "(4, 4) will be plotted\n",
            "(2, 8) will be plotted\n",
            "(3, 4) will be plotted\n",
            "(10, 7) will be plotted\n",
            "(4, 9) will be plotted\n",
            "(1, 8) will be plotted\n",
            "(3, 2) will be plotted\n",
            "(6, 4) will be plotted\n",
            "(9, 5) will be plotted\n",
            "(10, 7) will be plotted\n",
            "(3, 7) will be plotted\n"
          ]
        }
      ],
      "source": [
        "for i in range(len(xlist)):\n",
        "    print(\"({}, {}) will be plotted\".format(xlist[i], ylist[i]))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 108,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "k5wOAKl1G50U",
        "outputId": "b9f7cfbd-13d7-4141-cba3-fdd7a5a95bc7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f5c87946610>"
            ]
          },
          "metadata": {},
          "execution_count": 108
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.scatter(xlist, ylist) # A picture should pop up!  If it doesn't, please get help."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 109,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 281
        },
        "id": "oOrMfpS-G50U",
        "outputId": "d0ffd76f-13dd-4437-e446-fe6494b0f34c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7f5c877b8b80>"
            ]
          },
          "metadata": {},
          "execution_count": 109
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "xlist = np.random.random(500) # A list of 500 random floats between 0 and 1.\n",
        "ylist = np.random.random(500) # Another such list.\n",
        "plt.scatter(xlist, ylist)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "pyUGT7qFG50U"
      },
      "source": [
        "These examples are minimalist -- the quickest way to produce a plot, using all the matplotlib defaults.  Notice the axis ticks are automatically placed, the color of dots is an intelligent shade of blue, and the dots have a pleasing size and soft edge.  The single `plt.scatter(xlist, ylist)` created quite a complicated image from two lists of numbers.\n",
        "\n",
        "Behind the scenes, there is a lot going on!  In fact, the `plt.scatter` function activates the pyplot *state machine* and *changes its state*.  When the cell containing the `plt.scatter` function is finished with its execution, the figure is rendered as an image in your browser, and the *state machine* is closed down.  \n",
        "\n",
        "This \"state machine\" initializes a data structure, changes it according to `plt.<command>` functions, renders it to your browser, then disposes of the evidence.  Here is a more complicated example, which might be easier to decode."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 110,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 403
        },
        "id": "jloINAG8G50U",
        "outputId": "b7f8ab72-e5af-4122-af46-d6a66d3c4fe0"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x432 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "xlist = np.random.random(500) # A list of 500 random floats between 0 and 1.\n",
        "ylist = np.random.random(500) # Another such list.\n",
        "\n",
        "plt.figure(figsize=(6,6))\n",
        "plt.scatter(xlist, ylist, alpha=0.5, c='gold', s=50)\n",
        "plt.xlabel('Age of banana slug (in days)')\n",
        "plt.ylabel('Taste of banana slug (1 = tastiest)')\n",
        "plt.title('Age vs taste of banana slugs')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GMjpmErvG50U"
      },
      "source": [
        "We're going to go through the whole figure-creation and display, line by line.  There's a lot going on!\n",
        "\n",
        "1.  `plt.figure(figsize=(6,6))` starts the pyplot \"state machine\" by initializing a figure which is 6 inches by 6 inches in size.  The size on your screen may appear different, because your browser is smart.  If you want to manually set the figure size, you should do this before everything else.  All other `plt` commands in the cell will operate on this figure (the \"state\" of the \"state machine\").  Here is the basic [anatomy of a matplotlib figure](https://matplotlib.org/tutorials/introductory/usage.html)... it's quite complicated!\n",
        "\n",
        "2.  `plt.scatter(xlist, ylist, alpha=0.5, c='gold', s=50)`.  This uses pyplot's built-in scatter-plot-maker.  The xlist and ylist are the lists of x-coordinates and y-coordinates... the data which is being plotted.  The `alpha` parameter sets the transparency of the dots, which is very important when there are overlaps!  An alpha value of 1 yields completely opaque dots.  The `c` parameter sets the color of the dots.  Here the dot color is set to `gold`.  Here is a [list of named colors](https://matplotlib.org/examples/color/named_colors.html).  More fun than crayons!  The `s` parameter sets the size of the dots, measured by area.  Here is the [complete list of parameters](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.scatter.html) that can be passed to the `plt.scatter` function.\n",
        "\n",
        "3.  `plt.xlabel('Age of banana slug (in days)')`.  This sets the label on the x-axis of the active figure.\n",
        "\n",
        "4.  `plt.ylabel('Taste of banana slug (1 = tastiest)')`.  This sets the label on the y-axis of the active figure.\n",
        "\n",
        "5.  `plt.title('Age vs taste of banana slugs')`.  This sets the title of the active figure.\n",
        "\n",
        "6.  `plt.show()`.  Not strictly necessary, but a good habit.  This shows the plot.  After the cell is run, the \"state machine\" is effectively turned off and forgotten.  `plt` commands in later cells will not be able to change the plot you've created.\n",
        "\n",
        "You might wish to change some of the parameters in the above figure, and re-run the cell, to see the effect."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 111,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 298
        },
        "id": "qJ47fta6G50U",
        "outputId": "35b121f2-1ad4-46e5-adbb-af9cdd403ea6"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Text(0.5, 0, 'Can I change the label?')"
            ]
          },
          "metadata": {},
          "execution_count": 111
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.xlabel('Can I change the label?')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "-iXNZr6nG50U"
      },
      "source": [
        "When the banana-slug cell was executed, its state machine was turned off.  So if you try to make a change in a new cell with `plt.xlabel('...')`, you will end up *restarting* the state-machine in a mostly empty state, and then setting the xlabel of this new figure.  When you run the new cell, the figure is displayed, with your new label, and that state machine is terminated."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "kN8n7rzxG50V"
      },
      "source": [
        "Now we will make a scatterplot using the sine function.  Along the way, we use the numpy `arange` function.  The function `np.arange(a,b,s)` generates a numpy array which starts at `a` and ends *before* `b` and uses a step-size of `s`.  It's a lot like a range command, but... note that the `arange` function *does* put all the numbers into memory.  So beware and do not try to store a trillion numbers in your computer memory!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 112,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "l2xpLSqpG50V",
        "outputId": "89cc8bfd-7807-4f81-cfd0-7d5b5fa10472"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0 1 2 3 4 5 6 7 8 9]\n"
          ]
        }
      ],
      "source": [
        "print(np.arange(0,10,1)) # Looks familiar?"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 113,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lDxnZs3FG50V",
        "outputId": "e0dcca4b-daa0-4735-aa66-f295c696b2ac"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[0.  0.3 0.6 0.9 1.2 1.5 1.8 2.1 2.4 2.7 3.  3.3 3.6 3.9 4.2 4.5 4.8]\n"
          ]
        }
      ],
      "source": [
        "print(np.arange(0,5,0.3)) # A bit more flexible."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 114,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 158
        },
        "id": "uBcK29uqG50V",
        "outputId": "e6ffa7fa-0407-4888-8dcd-274fe9871dfc"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "TypeError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-114-975c6898fb50>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mrange\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m5\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m0.3\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;31m# The range command does not play nicely with floats.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;31mTypeError\u001b[0m: 'float' object cannot be interpreted as an integer"
          ]
        }
      ],
      "source": [
        "range(0,5,0.3) # The range command does not play nicely with floats."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 115,
      "metadata": {
        "id": "s5rb1SR5G50V"
      },
      "outputs": [],
      "source": [
        "xlist = np.arange(0, 10,0.1) # The list 0,0.1, 0.2, 0.3, etc. up to 9.9.\n",
        "sinlist = np.sin(xlist) # apply the sine function to each item in the list, via broadcasting.\n",
        "coslist = np.cos(xlist)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 116,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "-un5urMfG50V",
        "outputId": "61af3ed5-e4e4-4370-e4d3-5c4ce7981efe"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.figure(figsize=(15,5))\n",
        "plt.scatter(xlist, sinlist, alpha=0.5, c='blue', marker='x') # See the marker?\n",
        "plt.scatter(xlist, coslist, alpha=0.5, c='red', marker='o') # Multiple plots, no problem!\n",
        "plt.grid() # A grid might help.\n",
        "plt.xlabel('Time (in seconds)')\n",
        "plt.ylabel('Height of ball on spring (in cm)')\n",
        "plt.title('Observed trajectory of balls on spring')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "P9QotgZyG50V"
      },
      "source": [
        "### Line plots in matplotlib\n",
        "\n",
        "The previous example contains plots of the sine and cosine functions.  It is a bit unusual to plot functions with scatterplots; one would typically use a plot that \"connects the dots\" to reflect the continuity of the functions. While `plt.scatter` produces a scatter-plot, the simply-named `plt.plot` command produces a plot that connects the dots.   "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 117,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "tC4B89EhG50V",
        "outputId": "c74b9d1d-805e-4e45-c5bd-d0b6c335684d"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.figure(figsize=(15,5))\n",
        "plt.plot(xlist, sinlist, alpha=0.5, c='blue') \n",
        "plt.plot(xlist, coslist, alpha=0.5, c='red') # Multiple plots, no problem!\n",
        "plt.grid() # A grid might help.\n",
        "plt.xlabel('$x$') # Notice the dollar signs... matplotlib understands basic LaTeX in text!\n",
        "plt.ylabel('$y$')\n",
        "plt.title('Graphs of $y = \\sin(x)$ and $y = \\cos(x)$')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "7IFx8KA_G50V"
      },
      "source": [
        "Like everything with matplotlib, there are zillions of possible adjustments and additions one can make to this plot.  Here we just mention two.\n",
        "\n",
        "1.  Changing the axis ticks to be more relevant.\n",
        "2.  A *legend* that is advisable when plotting multiple functions."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 118,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 351
        },
        "id": "U3W2o0H5G50V",
        "outputId": "7ef1f229-c316-484d-c6e1-eb2be1f36f2c"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.figure(figsize=(15,5))\n",
        "plt.plot(xlist, sinlist, alpha=0.5, c='blue', label='$y=\\sin(x)$') # label for the legend.\n",
        "plt.plot(xlist, coslist, alpha=0.5, c='red', label='$y=\\cos(x)$') # label for the legend.\n",
        "plt.xticks(np.arange(0,10,np.pi/2)) # x-axis ticks (gridlines) are at multiples of pi/2.\n",
        "plt.grid() # A grid might help.\n",
        "plt.xlabel('$x$') # Notice the dollar signs... matplotlib understands basic LaTeX in text!\n",
        "plt.ylabel('$y$')\n",
        "plt.title('Graphs of $y = \\sin(x)$ and $y = \\cos(x)$')\n",
        "plt.legend() # Insert the legend, based on the plot labels.\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Sfse_MuRG50W"
      },
      "source": [
        "Note the x-ticks are at $0$, $\\pi/2$, $\\pi$, $3 \\pi / 2$, etc..  But they are labeled by floating point values.  We can fix this by making custom labels.  We store the x-tick locations in a numpy array `pimult` and the x-tick labels in another numpy array (of strings) `xlabels`.  It's a bit tedious, but the result will look nice.  Note that matplotlib will process the basic LaTeX that we use in the labels."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 119,
      "metadata": {
        "id": "OIW7QynZG50W"
      },
      "outputs": [],
      "source": [
        "pimult = np.arange(0,10,np.pi / 2) # The list of locations of the x-ticks.\n",
        "xlabels = np.array(['0', '$\\pi/2$', '$\\pi$', '$3 \\pi / 2$', '$2 \\pi$', '$5 \\pi / 2$', '$3 \\pi$'])"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 120,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 354
        },
        "id": "8a9Qm7iyG50W",
        "outputId": "ccb9bf5a-c19f-4008-b9a8-77bd87ebcda2"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1080x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.figure(figsize=(15,5))\n",
        "plt.plot(xlist, sinlist, alpha=0.5, c='blue', label='$y=\\sin(x)$') # label for the legend.\n",
        "plt.plot(xlist, coslist, alpha=0.5, c='red', label='$y=\\cos(x)$') # label for the legend.\n",
        "plt.xticks(pimult, xlabels) # x-axis ticks and labels.\n",
        "plt.grid() # A grid might help.\n",
        "plt.xlabel('$x$') # Notice the dollar signs... matplotlib understands basic LaTeX in text!\n",
        "plt.ylabel('$y$')\n",
        "plt.title('Graphs of $y = \\sin(x)$ and $y = \\cos(x)$')\n",
        "plt.legend() # Insert the legend, based on the plot labels.\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "m5zcUpMNG50W"
      },
      "source": [
        "For plotting functions, there are many tools out there.  One can use [Desmos](https://www.desmos.com/), for example, or Excel, or *Grapher* (preinstalled on every Apple computer).  But the line plotting in matplotlib is more flexible than most.  For example, let's plot a \"random walk\"."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 121,
      "metadata": {
        "id": "qpLTZgXeG50W"
      },
      "outputs": [],
      "source": [
        "xlist = np.zeros(100) # Initialize arrays of zeros.\n",
        "ylist = np.zeros(100) \n",
        "x,y = 0,0 # We start at (0,0).\n",
        "for t in range(100):  # t will be the \"time\" parameter for the walk.\n",
        "    xlist[t] = x\n",
        "    ylist[t] = y\n",
        "    x += np.random.random()-0.5 # Add a random number between -0.5 and 0.5 to x.\n",
        "    y += np.random.random()-0.5 # Add a random number between -0.5 and 0.5 to x."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "x7XGaj-mG50W"
      },
      "source": [
        "Note that we began by initializing xlist and ylist to an array of zeros, and *not* an empty array.  We did *not* begin with `xlist = np.array([])` and then append new x-values.  There's an important reason for this, having to do with the optimization of NumPy.  \n",
        "\n",
        "When NumPy stores an array, it finds a block of *consecutive* memory slots for the array values.  So if you start with an array of 100 zeros (as float64s), NumPy will find 6400 consecutive bits of memory in your computer, and set them to represent 100 consecutive zeros (each stored in a 64-bit clump).  \n",
        "\n",
        "If you *append* to a NumPy array, NumPy will be annoyed.  NumPy has already found a perfectly-sized block of memory for your data, and now you are asking NumPy to fit more data in the block.  So NumPy will go out and hunt for a new perfectly-sized block of memory to fit your data... every single time you append.  This will waste resources and make NumPy sad.\n",
        "\n",
        "On the other hand, NumPy will be perfectly happy to *change* the bits of memory that it has allocated.  So starting with all zeros, and changing those zeros to other 64-bit numbers, will keep NumPy HapPy."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 122,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 349
        },
        "id": "gVV09TBKG50W",
        "outputId": "ef7dc456-520c-4dda-dd9e-032e30aa0ad6"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.figure(figsize=(5,5))\n",
        "plt.plot(xlist, ylist, alpha=0.5, c='blue') # label for the legend.\n",
        "plt.grid() # A grid might help.\n",
        "plt.xlabel('$x$') # Notice the dollar signs... matplotlib understands basic LaTeX in text!\n",
        "plt.ylabel('$y$')\n",
        "plt.title('A random walk in 2 dimensions')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RWyw7DBkG50W"
      },
      "source": [
        "### Histograms in matplotlib\n",
        "\n",
        "A *histogram* is most frequently used to display the *distribution* of a single numerical variable.  In other words, if one has a big *set* of numbers, a histogram is used to display how these numbers are distributed:  are they clumped near a \"center\" or are they \"multimodal\" (having multiple \"centers\")?  Are they \"uniformly distributed\" within a range?  How much \"noise\" is present?  \n",
        "\n",
        "To understand histograms, we begin with a set of numbers, represented in a numpy array.  \n",
        "Read the [full histogram documentation](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.hist.html) for more!"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 123,
      "metadata": {
        "id": "wCVGbl67G50W"
      },
      "outputs": [],
      "source": [
        "A = np.random.random(100) # A list of 100 random numbers between 0 and 1."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "1nwi9NySG50W"
      },
      "source": [
        "The following code is a minimalist sort of histogram."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 124,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "X676TbLCG50X",
        "outputId": "32076975-5af0-4f06-bafd-61ff418e3976"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "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\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.figure(figsize=(5,5))\n",
        "plt.hist(A, bins=10) # Divide the range of numbers into 10 \"bins\".\n",
        "plt.grid()\n",
        "plt.title(\"Histogram of 100 random numbers between 0.0 and 1.0\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "sf4VZrRYG50X"
      },
      "source": [
        "The new ingredient here is the `plt.hist(A, bins=10)` command.  This carries out the following steps.\n",
        "\n",
        "1.  It identifies the smallest value of the array `A` and the largest value of the array `A`, and subdivides the space between this min and max into 10 \"bins\".\n",
        "\n",
        "2.  It counts the number of values within each bin.\n",
        "\n",
        "3.  It draws a bar for each bin, whose height is the number of values within each bin.\n",
        "\n",
        "For histogram, the automatic layout is often difficult to read.  We can choose the bins manually, and add xticks and yticks, to display the information more clearly.  We are going to use the `np.linspace` command, explained just below."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 125,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 335
        },
        "id": "zlnwf2N4G50X",
        "outputId": "44426ad7-326c-4012-86c5-357144161da3"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 360x360 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "plt.figure(figsize=(5,5))\n",
        "plt.hist(A, bins=np.linspace(0,1,11)) # Divide the range of numbers into 10 \"bins\".\n",
        "plt.plot ((0,1), (10,10)) # Compare to the flat distribution.\n",
        "plt.xticks(np.linspace(0,1,11))\n",
        "plt.yticks(np.arange(0,20,1))\n",
        "plt.grid()\n",
        "plt.title(\"Histogram of 100 random numbers between 0.0 and 1.0\")\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YvL09iFsG50X"
      },
      "source": [
        "The only new ingredient was the `np.linspace` command, which is a very useful variant of `np.arange`.  The command `np.arange(start, stop, step)` creates a numpy array that begins at `start` and ends *just before* `stop` using intervals of `step`.  This should be familiar from the usual Python `range` command.\n",
        "\n",
        "The command `np.linspace(start, stop, length)` creates a numpy array that begins at `start` and ends *at* `stop`, using `length` evenly spaced values.  This is particularly useful for graphing, where you might know the domain interval and the number of samples you wish to compute."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SqnpCrSCG50X"
      },
      "source": [
        "### Matplotlib Exercises\n",
        "\n",
        "1.  Use `np.arange` and `np.linspace` to product the same numpy array `array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])`.  \n",
        "\n",
        "2.  Create numpy arrays `xlist` and `ylist`, such that their scatter plot contains 100 evenly spaced points on the unit circle.\n",
        "\n",
        "3.  Use numpy to create a 10000 by 100 array of numbers, randomly chosen from {0,1}, with the command `R = np.random.choice([0,1], (10000,100))`.  You can think of each entry as a coin-toss, with 0 standing for tails and 1 for heads.  Now sum the rows of this array, to get an array of 10000 numbers between 0 and 100.  Make a histogram of this array to exhibit the [central limit theorem](https://en.wikipedia.org/wiki/Central_limit_theorem).  Use at least 20 bins.  Try this with other random choices of numbers, e.g., replacing [0,1] by other small lists of numbers.  How is the horizontal center of the histogram peak related to the list of numbers you choose?  Extra time? compare to the normal distribution by overlaying a suitable plt.plot."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "v1v0PxhZwdpC"
      },
      "source": [
        "###Solutions\n",
        "1. np.arange(0.,11.,1)\n",
        "\n",
        "np.linspace(0., 10.,11)\n",
        "\n",
        "2. plt.figure(figsize=(10,10))\n",
        "\n",
        "theta=np.linspace(0,2*np.pi,101)\n",
        "\n",
        "xlist = np.sin(theta) \n",
        "\n",
        "ylist = np.cos(theta)\n",
        "\n",
        "plt.scatter(xlist,ylist)\n",
        "\n",
        "plt.xlabel('x')\n",
        "\n",
        "plt.ylabel('y')\n",
        "\n",
        "plt.show()\n",
        "\n",
        "3. Using numpy to create a 10000 by 100 array of numbers, randomly chosen from (0,1), with the command R = np.random.choice([0,1], (10000, 100)), and then summing the rows of this array to get an array of 10000 numbers between 0 and 100. By changing the list of numbers [0,1] to other small lists of numbers, we can observe that the horizontal center of the histogram peak is related to the mean of the list of numbers. "
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "8ErzQDIvwWSu",
        "outputId": "2c3a0418-ec42-42a4-ca7a-5a9c6cba8267"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])"
            ]
          },
          "execution_count": 34,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.linspace(0., 10.,11)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oFMHPC5AxH0y",
        "outputId": "b4090b97-0f6a-42cf-a634-ceb5d16dc105"
      },
      "outputs": [
        {
          "data": {
            "text/plain": [
              "array([ 0.,  1.,  2.,  3.,  4.,  5.,  6.,  7.,  8.,  9., 10.])"
            ]
          },
          "execution_count": 36,
          "metadata": {},
          "output_type": "execute_result"
        }
      ],
      "source": [
        "np.arange(0.,11.,1)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 606
        },
        "id": "bsXMFE1xxps7",
        "outputId": "f63caf65-392e-4346-a56a-ffff77ccab7e"
      },
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 720x720 with 1 Axes>"
            ]
          },
          "metadata": {},
          "output_type": "display_data"
        }
      ],
      "source": [
        "plt.figure(figsize=(10,10))\n",
        "theta=np.linspace(0,2*np.pi,101)\n",
        "xlist = np.sin(theta) \n",
        "ylist = np.cos(theta)\n",
        "plt.scatter(xlist,ylist)\n",
        "plt.xlabel('x')\n",
        "plt.ylabel('y')\n",
        "plt.show()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 128,
      "metadata": {
        "id": "M49F-BH10grL",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "outputId": "c3936c78-cf3d-44ad-e7d7-c80d06cad3f3"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAX0AAAD8CAYAAACb4nSYAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/NK7nSAAAACXBIWXMAAAsTAAALEwEAmpwYAAAUHUlEQVR4nO3df6xkZ33f8fenduwEErH+ceM6u+vuJiwgigK4N8aIFgFOzBoj1pUIskWbLbW0amunpKSFdZDqNhGV6S8HpNTSBi/YDbJxXRKvsBtnY4hQpfrHGozBNsQ3xrB3ZXsv+EdKEKaGb/+YZ2G4vrt3d2buvbN+3i9pNOc855k533nW/sy5z5w5k6pCktSHv7XWBUiSVo+hL0kdMfQlqSOGviR1xNCXpI4Y+pLUkWVDP8nuJAeTfGVR+28m+WqSB5L8x6H2K5LMJflakrcOtW9tbXNJdk72ZUiSjkaWO08/yRuB7wDXV9WrWtubgQ8CF1bVs0l+vqoOJnklcANwDvALwJ8DL2tP9ZfArwHzwD3AJVX14Aq8JknSYZy4XIeq+nySTYua/zlwVVU92/ocbO3bgBtb+9eTzDF4AwCYq6pHAJLc2Poa+pK0ipYN/cN4GfAPknwI+B7wr6vqHmA9cOdQv/nWBrB/UfvrltvJ6aefXps2bRqxREnq07333vutqppZatuooX8icCpwLvArwE1JfnHE5/oJSXYAOwDOOuss9u3bN4mnlaRuJPnG4baNevbOPPDpGrgb+CFwOnAA2DjUb0NrO1z781TVrqqararZmZkl36gkSSMaNfT/BHgzQJKXAScB3wL2ABcnOTnJZmALcDeDD263JNmc5CTg4tZXkrSKlp3eSXID8Cbg9CTzwJXAbmB3O43z+8D2GpwG9ECSmxh8QPsccFlV/aA9z+XA7cAJwO6qemAFXo8k6QiWPWVzLc3OzpZz+pJ0bJLcW1WzS23zG7mS1BFDX5I6YuhLUkcMfUnqiKEvSR0Z9Ru50gvCpp23jvzYR6+6cIKVSKvDI31J6oihL0kdMfQlqSOGviR1xNCXpI549o40Is/80fHII31J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUkWVDP8nuJAfb7+Eu3vbbSSrJ6W09ST6aZC7J/UnOHuq7PcnD7bZ9si9DknQ0juZI/xPA1sWNSTYC5wPfHGq+ANjSbjuAa1rfUxn8oPrrgHOAK5OcMk7hkqRjt2zoV9XngSeX2HQ18H5g+JfVtwHX18CdwLokZwJvBfZW1ZNV9RSwlyXeSCRJK2ukOf0k24ADVfWlRZvWA/uH1udb2+HaJUmr6Jgvw5DkRcDvMJjambgkOxhMDXHWWWetxC4kqVujHOn/ErAZ+FKSR4ENwBeS/G3gALBxqO+G1na49uepql1VNVtVszMzMyOUJ0k6nGM+0q+qLwM/f2i9Bf9sVX0ryR7g8iQ3MvjQ9pmqeizJ7cB/GPrw9nzgirGrV/fGueiZ1KOjOWXzBuD/AC9PMp/k0iN0vw14BJgD/hD4FwBV9STwe8A97fa7rU2StIqWPdKvqkuW2b5paLmAyw7Tbzew+xjrkyRNkN/IlaSOGPqS1BFDX5I6YuhLUkcMfUnqiKEvSR0x9CWpI4a+JHXE0Jekjhj6ktQRQ1+SOmLoS1JHjvnSypLGN84loR+96sIJVqLeeKQvSR0x9CWpI4a+JHXE0Jekjhj6ktSRo/mN3N1JDib5ylDbf0ry1ST3J/njJOuGtl2RZC7J15K8dah9a2ubS7Jz4q9EkrSsoznS/wSwdVHbXuBVVfXLwF8CVwAkeSVwMfB322P+W5ITkpwA/AFwAfBK4JLWV5K0ipYN/ar6PPDkorY/q6rn2uqdwIa2vA24saqeraqvA3PAOe02V1WPVNX3gRtbX0nSKprEnP4/Bf5XW14P7B/aNt/aDtcuSVpFY4V+kg8CzwGfnEw5kGRHkn1J9i0sLEzqaSVJjBH6Sf4J8Hbg3VVVrfkAsHGo24bWdrj256mqXVU1W1WzMzMzo5YnSVrCSKGfZCvwfuAdVfXdoU17gIuTnJxkM7AFuBu4B9iSZHOSkxh82LtnvNIlScdq2QuuJbkBeBNwepJ54EoGZ+ucDOxNAnBnVf2zqnogyU3AgwymfS6rqh+057kcuB04AdhdVQ+swOuRJB3BsqFfVZcs0XztEfp/CPjQEu23AbcdU3WSpInyG7mS1BFDX5I6YuhLUkcMfUnqiKEvSR0x9CWpI4a+JHXE0Jekjhj6ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSPLXlpZWmmbdt661iVI3fBIX5I6YuhLUkcMfUnqiKEvSR1ZNvST7E5yMMlXhtpOTbI3ycPt/pTWniQfTTKX5P4kZw89Znvr/3CS7SvzciRJR3I0R/qfALYuatsJ3FFVW4A72jrABcCWdtsBXAODNwngSuB1wDnAlYfeKCRJq2fZ0K+qzwNPLmreBlzXlq8DLhpqv74G7gTWJTkTeCuwt6qerKqngL08/41EkrTCRp3TP6OqHmvLjwNntOX1wP6hfvOt7XDtz5NkR5J9SfYtLCyMWJ4kaSljf5BbVQXUBGo59Hy7qmq2qmZnZmYm9bSSJEYP/SfatA3t/mBrPwBsHOq3obUdrl2StIpGDf09wKEzcLYDtwy1/0Y7i+dc4Jk2DXQ7cH6SU9oHuOe3NknSKlr22jtJbgDeBJyeZJ7BWThXATcluRT4BvCu1v024G3AHPBd4D0AVfVkkt8D7mn9freqFn84LElaYcuGflVdcphN5y3Rt4DLDvM8u4Hdx1SdJGmi/EauJHXE0Jekjhj6ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSPLfjlL0nTZtPPWsR7/6FUXTqgSHY880pekjhj6ktQRQ1+SOmLoS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI6MFfpJ/lWSB5J8JckNSX46yeYkdyWZS/KpJCe1vie39bm2fdNEXoEk6aiNHPpJ1gP/EpitqlcBJwAXAx8Grq6qlwJPAZe2h1wKPNXar279JEmraNzpnROBn0lyIvAi4DHgLcDNbft1wEVteVtbp20/L0nG3L8k6RiMHPpVdQD4z8A3GYT9M8C9wNNV9VzrNg+sb8vrgf3tsc+1/qctft4kO5LsS7JvYWFh1PIkSUsYZ3rnFAZH75uBXwBeDGwdt6Cq2lVVs1U1OzMzM+7TSZKGjDO986vA16tqoar+H/Bp4A3AujbdA7ABONCWDwAbAdr2lwDfHmP/kqRjNE7ofxM4N8mL2tz8ecCDwOeAd7Y+24Fb2vKetk7b/tmqqjH2L0k6RuPM6d/F4APZLwBfbs+1C/gA8L4kcwzm7K9tD7kWOK21vw/YOUbdkqQRjPXLWVV1JXDlouZHgHOW6Ps94NfH2Z8kaTx+I1eSOmLoS1JHDH1J6oihL0kdMfQlqSNjnb0jHbJp561rXYKko+CRviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6MlboJ1mX5OYkX03yUJLXJzk1yd4kD7f7U1rfJPlokrkk9yc5ezIvQZJ0tMY90v8I8KdV9Qrg1cBDDH7w/I6q2gLcwY9/AP0CYEu77QCuGXPfkqRjNHLoJ3kJ8EbgWoCq+n5VPQ1sA65r3a4DLmrL24Dra+BOYF2SM0fdvyTp2I1zpL8ZWAA+nuSLST6W5MXAGVX1WOvzOHBGW14P7B96/Hxr+wlJdiTZl2TfwsLCGOVJkhYbJ/RPBM4Grqmq1wJ/w4+ncgCoqgLqWJ60qnZV1WxVzc7MzIxRniRpsXFCfx6Yr6q72vrNDN4Enjg0bdPuD7btB4CNQ4/f0NokSatk5NCvqseB/Ule3prOAx4E9gDbW9t24Ja2vAf4jXYWz7nAM0PTQJKkVTDub+T+JvDJJCcBjwDvYfBGclOSS4FvAO9qfW8D3gbMAd9tfSVJq2is0K+q+4DZJTadt0TfAi4bZ3+SpPH4jVxJ6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHRn32juSjjObdt468mMfverCCVaiteCRviR1xNCXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHRk79JOckOSLST7T1jcnuSvJXJJPtd/PJcnJbX2ubd807r4lScdmEkf67wUeGlr/MHB1Vb0UeAq4tLVfCjzV2q9u/SRJq2is0E+yAbgQ+FhbD/AW4ObW5Trgora8ra3Ttp/X+kuSVsm4l2H4feD9wM+19dOAp6vqubY+D6xvy+uB/QBV9VySZ1r/b41ZgyZknK/nSzo+jHykn+TtwMGquneC9ZBkR5J9SfYtLCxM8qklqXvjTO+8AXhHkkeBGxlM63wEWJfk0F8QG4ADbfkAsBGgbX8J8O3FT1pVu6pqtqpmZ2ZmxihPkrTYyKFfVVdU1Yaq2gRcDHy2qt4NfA54Z+u2HbilLe9p67Ttn62qGnX/kqRjtxLn6X8AeF+SOQZz9te29muB01r7+4CdK7BvSdIRTOR6+lX1F8BftOVHgHOW6PM94NcnsT9J0mj8Rq4kdcTQl6SOGPqS1BFDX5I6YuhLUkcMfUnqiKEvSR0x9CWpIxP5cpakPoxzJdZHr7pwgpVoVB7pS1JHDH1J6oihL0kdMfQlqSOGviR1xNCXpI4Y+pLUEUNfkjpi6EtSR0YO/SQbk3wuyYNJHkjy3tZ+apK9SR5u96e09iT5aJK5JPcnOXtSL0KSdHTGOdJ/DvjtqnolcC5wWZJXMvjB8zuqagtwBz/+AfQLgC3ttgO4Zox9S5JGMHLoV9VjVfWFtvx/gYeA9cA24LrW7Trgora8Dbi+Bu4E1iU5c9T9S5KO3UTm9JNsAl4L3AWcUVWPtU2PA2e05fXA/qGHzbc2SdIqGTv0k/ws8D+B36qqvx7eVlUF1DE+344k+5LsW1hYGLc8SdKQsUI/yU8xCPxPVtWnW/MTh6Zt2v3B1n4A2Dj08A2t7SdU1a6qmq2q2ZmZmXHKkyQtMvL19JMEuBZ4qKr+69CmPcB24Kp2f8tQ++VJbgReBzwzNA2kCRnneueSXvjG+RGVNwD/GPhykvta2+8wCPubklwKfAN4V9t2G/A2YA74LvCeMfYtSRrByKFfVf8byGE2n7dE/wIuG3V/kqTx+Y1cSeqIoS9JHTH0Jakjhr4kdcTQl6SOGPqS1BFDX5I6Ms6XsyTpqI3zbfFHr7pwgpX0zSN9SeqIoS9JHTH0Jakjhr4kdcTQl6SOePbOlPF6+JJWkkf6ktQRQ1+SOuL0jqSp5xe7JscjfUnqyKqHfpKtSb6WZC7JztXevyT1bFWnd5KcAPwB8GvAPHBPkj1V9eBq1rHSPANHmh7j/v/4QpseWu05/XOAuap6BCDJjcA24AUV+pJeOF5onyesduivB/YPrc8Dr1upnXnELUk/aerO3kmyA9jRVr+T5GtH6H468K2Vr2ok1jYaaxuNtY1mRWvLh8d6+Di1/Z3DbVjt0D8AbBxa39DafqSqdgG7jubJkuyrqtnJlTc51jYaaxuNtY2mx9pW++yde4AtSTYnOQm4GNizyjVIUrdW9Ui/qp5LcjlwO3ACsLuqHljNGiSpZ6s+p19VtwG3TejpjmoaaI1Y22isbTTWNpruaktVrcTzSpKmkJdhkKSOHBehn+Snk9yd5EtJHkjy71v75iR3tUs6fKp9ODwttX0iydeT3Ndur1nt2oZqPCHJF5N8pq2v+bgdobapGLckjyb5cqthX2s7NcneJA+3+1OmqLZ/l+TA0Li9bY1qW5fk5iRfTfJQktdP0bgtVdu0jNvLh2q4L8lfJ/mtlRi74yL0gWeBt1TVq4HXAFuTnAt8GLi6ql4KPAVcOkW1AfybqnpNu923BrUd8l7goaH1aRi3QxbXBtMzbm9uNRw6bW4ncEdVbQHuaOtrZXFtMPg3PTRuk/rc7Fh9BPjTqnoF8GoG/7bTMm5L1QZTMG5V9bVDNQB/D/gu8MeswNgdF6FfA99pqz/VbgW8Bbi5tV8HXDRFtU2FJBuAC4GPtfUwBeO2VG3HgW0MxgvWcNymVZKXAG8ErgWoqu9X1dNMwbgdobZpdB7wV1X1DVZg7I6L0IcfTQPcBxwE9gJ/BTxdVc+1LvMMLvOw5rVV1V1t04eS3J/k6iQnr0VtwO8D7wd+2NZPY0rGjefXdsg0jFsBf5bk3vYtcYAzquqxtvw4cMbalLZkbQCXt3HbvUZTKJuBBeDjbcruY0lezHSM2+Fqg7Uft8UuBm5oyxMfu+Mm9KvqB+1Pnw0MLtz2irWt6McW15bkVcAVDGr8FeBU4AOrXVeStwMHq+re1d73co5Q25qPW/P3q+ps4ALgsiRvHN5Yg9Pe1uovuqVquwb4JQZTjI8B/2UN6joROBu4pqpeC/wNi6Yj1nDcDlfbNIzbj7TP194B/I/F2yY1dsdN6B/S/iT7HPB6YF2SQ981eN4lHVbbUG1bq+qxNvXzLPBxBm9Uq+0NwDuSPArcyGBa5yNMx7g9r7YkfzQl40ZVHWj3BxnMrZ4DPJHkTIB2f3BaaquqJ9rBxw+BP2Rtxm0emB/6S/dmBkE7DeO2ZG1TMm7DLgC+UFVPtPWJj91xEfpJZpKsa8s/w+B6/A8xCNh3tm7bgVumpLavDv1DhcE83FdWu7aquqKqNlTVJgZ/Mn62qt7NFIzbYWr7R9MwbklenOTnDi0D57c69jAYL1i7/96WrO3QuDX/kLX57+1xYH+Sl7em8xhcNn3Nx+1wtU3DuC1yCT+e2oGVGLuqmvob8MvAF4H7Gfyj/NvW/ovA3cAcgz+HTp6i2j4LfLm1/RHws2s8hm8CPjMt43aE2tZ83Nr4fKndHgA+2NpPY3AGxcPAnwOnTlFt/72N2/0MguLMNfq3fA2wr9XxJ8Ap0zBuR6htKsat1fdi4NvAS4baJj52fiNXkjpyXEzvSJImw9CXpI4Y+pLUEUNfkjpi6EtSRwx9SeqIoS9JHTH0Jakj/x97fg9SGaWwGAAAAABJRU5ErkJggg==\n"
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "R = np.random.choice([0, 1], size=(10000, 100))\n",
        "row_sums = R.sum(axis=1)\n",
        "plt.hist(row_sums, bins=20)\n",
        "plt.show()\n"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "R = np.random.choice([0, 1], size=(10000, 100))\n",
        "row_sums = R.sum(axis=1)\n",
        "mean = np.mean(row_sums)\n",
        "std = np.std(row_sums)\n",
        "x=np "
      ],
      "metadata": {
        "id": "2ij3nnbKhE1L"
      },
      "execution_count": 127,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "X9VVZo4lG50X"
      },
      "outputs": [],
      "source": [
        "# Use this space for the exercises.\n",
        "# Make sure each plot is in a different cell!"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "S4v1eb4XG50X"
      },
      "source": [
        "## Visualization with pillow\n",
        "\n",
        "The Python Imaging Library (PIL) was started over 20 years ago, as a package for working with images (in formats like jpg, png, bmp, etc.) in Python.  Development of PIL mostly stopped in 2011, but is thankfully revived as [Pillow](https://pillow.readthedocs.io/en/stable/) (the \"friendly PIL fork\").  \n",
        "\n",
        "Let's see if it works, with some basic code below."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 134,
      "metadata": {
        "id": "YvKtBdJhG50X"
      },
      "outputs": [],
      "source": [
        "from PIL import Image # Load the package."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "HtjTaDGzG50X"
      },
      "source": [
        "A matplotlib figure is built of certain elements -- axes, labels, dots, lines, legends, grids, ticks, etc..  By design, these elements are meant to be assembled into a large but standard zoo of scientific graphics.\n",
        "\n",
        "In contrast, PIL works with images at a more rudimentary level.  In the lines below, we use NumPy to create a 3-dimensional array of numbers, and then use PIL to turn these numbers into an image, save the image, and display the image."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 135,
      "metadata": {
        "id": "FNParaoxG50Y"
      },
      "outputs": [],
      "source": [
        "array = np.zeros([256, 256, 3], dtype=np.uint8) # Recall uint8 = unsigned 8-bit integer.  Must be in 0...255.\n",
        "for x in range(256): \n",
        "    for y in range(256): \n",
        "        array[x, y] = [x, y, 256-x//2]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 136,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "HhRRBlFQG50Y",
        "outputId": "cfda496c-9f4e-46d0-b2ae-86b9981e7556"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=256x256 at 0x7F5C8778ECD0>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAAC4klEQVR4nO3VsQ0AMAzDsATo/y+3Z3QQCR/gTTszs2bRnR3oOjv39wf4RgFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIUwDSFIA0BSBNAUhTANIUgDQFIE0BSFMA0hSANAUgTQFIe4H4hH2esBnDAAAAAElFTkSuQmCC\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "img = Image.fromarray(array) # Create an image from the array.\n",
        "img.save('testrgba.png') # Save the image to Google's computer as a png file.  May not work well with colab.\n",
        "display(img) # Display the image in the notebook."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 137,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 16
        },
        "id": "-uuRQmX6MX8z",
        "outputId": "752bf39b-cb44-4f3a-e81a-bcedbb6d0902"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_023a9fcf-e50b-420e-9b97-d2cea63ba1cc\", \"testrgba.png\", 795)"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "from google.colab import files\n",
        "files.download('testrgba.png')  # If you want to download the PNG file to your computer."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "GFOWp7i3G50Y"
      },
      "source": [
        "To understand how this works, it is helpful to understand a bit more about light, computer monitors, and images-as-data.  Light is electromagnetic radiation, and it travels through space in waves.  Light waves with a wavelength of about 400-700 nanometers stimulate cells on our retina, and therefore are *visible*.  Longer wavelength light includes infrared, microwave, and radio waves.  Shorter wavelength light includes ultraviolet and x-rays.\n",
        "\n",
        "For most of us, our retinas contain 3 types of \"cone cells\" which are responsive to different wavelengths of light.  Some are most responsive to light in the low 400 nm range, others to light in the low 500nm range, others in the mid 500nm range.  Signals from these three kinds of cells get passed to the brain, and we are able to distinguish between different wavelengths (in the 400-700nm range) by which cells are more or less activated.\n",
        "\n",
        "If you see light purely in the 400-450 nm range, it looks pretty blue, whereas light at the 650-700 nm range looks pretty red.  A typical red laser pointer shines light that's close to 650nm.\n",
        "\n",
        "Your computer monitor contains millions of *pixels* -- extremely tiny these days (often below 100 micrometers square).  Each pixel contains a red, a blue, and a green subpixel.  Each of these subpixels is individually dimmable, and is often set between 0 (completely off) and 255 (completely on).  In this way, each pixel can be black (red = 0, blue = 0, green = 0) or bright pure red (red = 255, blue = 0, green = 0) or white (red = 255, blue = 255, green = 255).\n",
        "\n",
        "To understand how this makes \"white\" or \"yellow\" or all the other colors in the rainbow, you need to understand an *additive* color scheme as well as how light is perceived.  When light of multiple wavelengths hits your retina, your brain perceives a certain color.  In fact, if light of a red wavelength (680nm) and green wavelength (510nm) hits your retina at the same time, your brain will see it exactly the same as light of a yellow wavelength (560nm).  When you look at a bright yellow picture on your computer monitor, your computer is actually shining red and green light at your retina... the red and green dots are just so tiny and closely packed that your brain doesn't know the difference.\n",
        "\n",
        "The code below creates a 200 by 200 by 3 array of numbers, each between 0 and 255.  But you should think about it as a 200 by 200 array of quadruples of the form `[red value, green value, blue value]`.  Each value can be between 0 and 255 -- it is represented as a np.uint8.\n",
        "\n",
        "This array is then turned into a PIL Image with the `Image.fromarray` function.  Then the PIL function `display` displays the image.  Notice how red+green looks yellow.  Experiment with the red, green, and blue values to see what happens!\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 138,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 216
        },
        "id": "boa_dH73G50Y",
        "outputId": "27d6062d-662a-4145-9213-49413732c5ef"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=200x200 at 0x7F5C8719D190>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAIAAAAiOjnJAAACEklEQVR4nO3SQQkAIADAQLV/Zy3hEOQuwR6bew+4br0O4E/GImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBLGImEsEsYiYSwSxiJhLBIHViMDjgGr3oAAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "solid = np.zeros((200, 200,3), dtype=np.uint8)\n",
        "for x in range(200):\n",
        "    for y in range(200):\n",
        "        solid[y,x] = [255,255,0] # Red = 255, Green = 255, Blue = 0\n",
        "img = Image.fromarray(solid) # Create an image from the array.\n",
        "display(img)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 139,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "id": "FMWAKRs1G50Y",
        "outputId": "d2632429-dedc-417a-9502-f392fbaa63dd"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=256x256 at 0x7F5C8AA487C0>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAACuklEQVR4nO3TAREAIACEsNfkRjcI21GBs7czKdodhBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkGIM0ApBmANAOQZgDSDECaAUgzAGkfcBADf9uSvcIAAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "gradient = np.zeros((256, 256,3), dtype=np.uint8)\n",
        "for x in range(256):\n",
        "    for y in range(256):\n",
        "        gradient[y,x] = [x,128,0] # Red = x, Green = 128, Blue = 0\n",
        "img = Image.fromarray(gradient) # Create an image from the array.\n",
        "display(img)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "3NNvd0ApG50Y"
      },
      "source": [
        "There is something terribly confusing that happens when one goes back and forth between PIL images and NumPy arrays.  The x-coordinate and y-coordinate gets switched.  Notice in the above code that `gradient[y,x]` is being assigned a value `[x,128,0]`  This means that as x changes, the color chages (from green to orange).  The RGB triple stored in `gradient[y,x]` corresponds to the pixel with x-coordinate x.  That's why `[y,x]` is used and not `[x,y]`."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ieJX_F6QG50Y"
      },
      "source": [
        "When we save images, we will use the png [portable network graphics](https://en.wikipedia.org/wiki/Portable_Network_Graphics) image format.  This is very commonly used for graphics on the web, and can be used to store all of the red/green/blue bytes of data in a rectangular image.  Most importantly for us, the png format is *lossless* -- every pixel will be saved as intended in a png file.  On the other hand, formats like jpeg *lose information* as they compress the image.\n",
        "\n",
        "We can use Python (with PIL) to open images, modify them as NumPy arrays, and then display them and save them as images again."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "bOfoV6ioG50Y"
      },
      "source": [
        "To practice a bit of image manipulation, we are going to fix a very strange looking cat.  Begin by downloading the file `meowp.png` from this [GitHub link](https://github.com/MartyWeissman/PythonForMathematics/blob/main/meowp.png)  onto your computer.  Then use the following command to upload it to Google's server."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 140,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 317
        },
        "id": "oDx5iZPNMAC9",
        "outputId": "783b621c-db6c-4697-89ec-89cd68d3e843"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-beae467a-9384-4992-ab1d-503911d1b7dd\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-beae467a-9384-4992-ab1d-503911d1b7dd\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "error",
          "ename": "KeyboardInterrupt",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-140-63b259460c61>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mfiles\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupload\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36mupload\u001b[0;34m()\u001b[0m\n\u001b[1;32m     65\u001b[0m   \"\"\"\n\u001b[1;32m     66\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 67\u001b[0;31m   \u001b[0muploaded_files\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_upload_files\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmultiple\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     68\u001b[0m   \u001b[0;31m# Mapping from original filename to filename as saved locally.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     69\u001b[0m   \u001b[0mlocal_filenames\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/google/colab/files.py\u001b[0m in \u001b[0;36m_upload_files\u001b[0;34m(multiple)\u001b[0m\n\u001b[1;32m    142\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    143\u001b[0m   \u001b[0;31m# First result is always an indication that the file picker has completed.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 144\u001b[0;31m   result = _output.eval_js(\n\u001b[0m\u001b[1;32m    145\u001b[0m       'google.colab._files._uploadFiles(\"{input_id}\", \"{output_id}\")'.format(\n\u001b[1;32m    146\u001b[0m           input_id=input_id, output_id=output_id))\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/google/colab/output/_js.py\u001b[0m in \u001b[0;36meval_js\u001b[0;34m(script, ignore_result, timeout_sec)\u001b[0m\n\u001b[1;32m     38\u001b[0m   \u001b[0;32mif\u001b[0m \u001b[0mignore_result\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     39\u001b[0m     \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 40\u001b[0;31m   \u001b[0;32mreturn\u001b[0m \u001b[0m_message\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread_reply_from_input\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrequest_id\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mtimeout_sec\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     41\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     42\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/google/colab/_message.py\u001b[0m in \u001b[0;36mread_reply_from_input\u001b[0;34m(message_id, timeout_sec)\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0mreply\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_read_next_input_message\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     96\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mreply\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0m_NOT_READY\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mreply\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 97\u001b[0;31m       \u001b[0mtime\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msleep\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m0.025\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     98\u001b[0m       \u001b[0;32mcontinue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     99\u001b[0m     if (reply.get('type') == 'colab_reply' and\n",
            "\u001b[0;31mKeyboardInterrupt\u001b[0m: "
          ]
        }
      ],
      "source": [
        "files.upload()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 141,
      "metadata": {
        "id": "MK0RD32KG50Z",
        "scrolled": true,
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 290
        },
        "outputId": "a1fae16e-1a68-47a0-d38e-38a8c248cc85"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-141-2a1cc978cfbb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'meowp.png'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/PIL/Image.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(fp, mode, formats)\u001b[0m\n\u001b[1;32m   2973\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2974\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2975\u001b[0;31m         \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltins\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2976\u001b[0m         \u001b[0mexclusive_fp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2977\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'meowp.png'"
          ]
        }
      ],
      "source": [
        "cat = Image.open('meowp.png')\n",
        "display(cat)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "mahv8ShVG50Z"
      },
      "source": [
        "To examine the image file, let's display a few things."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "L4XWk0mLG50Z"
      },
      "outputs": [],
      "source": [
        "print(cat.format) # What format does the image have?\n",
        "print(cat.size) # What are the dimensions of the image?\n",
        "print(cat.mode) # What is the color-mode of the image?"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wz0euj_zG50Z"
      },
      "source": [
        "To manipulate this image, let's covert it to a NumPy array."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Vrkin5ZvG50Z"
      },
      "outputs": [],
      "source": [
        "catarray = np.asarray(cat)\n",
        "print(catarray.shape)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "9EsuuiP1G50Z"
      },
      "source": [
        "If you look at the image, it looks like the red, green, and blue parts have been separated and overlayed in some weird way.  We can look at the red-channel only by creating a new red-only image.  We use the `catarray.copy()` command at the beginning to put our red-cat data into a new NumPy array (without harming the original catarray!)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "KkVmIK-fG50Z"
      },
      "outputs": [],
      "source": [
        "redcatarray = catarray.copy()\n",
        "redcatarray[:,:,[1,2]] = 0  # Set all green and blue values equal to zero.\n",
        "display(Image.fromarray(redcatarray))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "iH57ybNVG50Z"
      },
      "source": [
        "Now let's look at the green channel by itself."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "PYXAO9XYG50a"
      },
      "outputs": [],
      "source": [
        "greencatarray = catarray.copy()\n",
        "greencatarray[:,:,[0,2]] = 0\n",
        "display(Image.fromarray(greencatarray))"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "JY8gPiAhG50a"
      },
      "source": [
        "Now we see the problem!  Complete the exercises below to fix the image."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "i_HgiRj5G50a"
      },
      "source": [
        "### Exercises\n",
        "\n",
        "1.  Create a gradient-square which is blue at the top and red at the bottom.  \n",
        "\n",
        "2.  Create and display the blue channel of the cat-image.  \n",
        "\n",
        "3.  Flip the blue and green cat-images, so that they match the orientation of the red image.  Hint:  remember that `L[-1::-1]` reversed a list.  Try this syntax with the NumPy arrays!  Watch your x- and y- axis reversal! \n",
        "\n",
        "4.  Assemble the three properly oriented images (match the orientation of the red image) to assemble a complete RGB kitty.  Can you assemble the image without using any loops?\n",
        "\n",
        "5.  (A little bit of [steganography](https://en.wikipedia.org/wiki/Steganography)!)  There's a coded message in the green channel, once it's oriented correctly.  The message is located at y-coordinate 10 and x-coordinates 0,8,16,24,32,etc.  Find this message by using applying the `chr` function to the green values at these locations.  If you want to experiment, the `ord` function converts characters (one-letter strings) to uint8's and the `chr` function converts uint8's to characters, using ASCII code."
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "###Solutions \n",
        "1. gradient = np.zeros((256, 256,3), dtype=np.uint8)\n",
        "\n",
        "for x in range(256):\n",
        "\n",
        "for y in range(256):\n",
        "\n",
        "gradient[y,x] = [y,40,140]\n",
        "\n",
        "img = Image.fromarray(gradient) \n",
        "\n",
        "display(img) \n",
        "\n",
        "2. cat=image.open('meowp.png')\n",
        "\n",
        "display(cat)\n",
        "\n",
        "bluecatarray = catarray.copy()\n",
        "\n",
        "bluecatarray[:,:,[0,1]] = 0\n",
        "\n",
        "display(Image.fromarray(bluecatarray))\n",
        "\n",
        "3. blue_cat = plt.imread('blue_cat.jpg')\n",
        "\n",
        "green_cat = plt.imread('green_cat.jpg')\n",
        "\n",
        "red_cat = plt.imread(\"red_cat.jpg\")\n",
        "\n",
        "flipped_blue_cat = blue_cat[:, ::-1, :]\n",
        "\n",
        "flipped_green_cat = green_cat[:, ::-1, :]\n",
        "\n",
        "plt.imshow(flipped_blue_cat)\n",
        "\n",
        "plt.show()\n",
        "\n",
        "plt.imshow(flipped_green_cat)\n",
        "\n",
        "plt.show()\n",
        "\n",
        "4. \n",
        "5. "
      ],
      "metadata": {
        "id": "Y5ehq5yOiRJO"
      }
    },
    {
      "cell_type": "code",
      "execution_count": 163,
      "metadata": {
        "id": "8AiBJaWGG50b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 272
        },
        "outputId": "f5e6e450-ffc5-4c58-d321-7ca5bb70ad95"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<PIL.Image.Image image mode=RGB size=256x256 at 0x7F5C87777A60>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAQAAAAEACAIAAADTED8xAAACwElEQVR4nO3TQQ0AIBDAMC5BDGIRjQweaxXss1nnLqja87sAPjIAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIMQJoBSDMAaQYgzQCkGYA0A5BmANIeQM8FseKrfI4AAAAASUVORK5CYII=\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "gradient = np.zeros((256, 256,3), dtype=np.uint8)\n",
        "for x in range(256):\n",
        "    for y in range(256):\n",
        "        gradient[y,x] = [y,40,140]\n",
        "img = Image.fromarray(gradient) \n",
        "display(img)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 164,
      "metadata": {
        "id": "6O-ed7HSG50b",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 224
        },
        "outputId": "5b2de3ea-a266-40ca-b283-d3184001363b"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "NameError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-164-412a67e10a57>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[0;32m----> 1\u001b[0;31m \u001b[0mcat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'meowp.png'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      2\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0mbluecatarray\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mcatarray\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcopy\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mbluecatarray\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mdisplay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mImage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfromarray\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mbluecatarray\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mNameError\u001b[0m: name 'image' is not defined"
          ]
        }
      ],
      "source": [
        "cat=image.open('meowp.png')\n",
        "display(cat)\n",
        "bluecatarray = catarray.copy()\n",
        "bluecatarray[:,:,[0,1]] = 0\n",
        "display(Image.fromarray(bluecatarray))"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np \n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "blue_cat = plt.imread('blue_cat.jpg')\n",
        "green_cat = plt.imread('green_cat.jpg')\n",
        "red_cat = plt.imread(\"red_cat.jpg\")\n",
        "\n",
        "flipped_blue_cat = blue_cat[:, ::-1, :]\n",
        "flipped_green_cat = green_cat[:, ::-1, :]\n",
        "\n",
        "plt.imshow(flipped_blue_cat)\n",
        "plt.show()\n",
        "\n",
        "plt.imshow(flipped_green_cat)\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 364
        },
        "id": "OtzVBV8Qmdu_",
        "outputId": "e88cfe62-c84f-4f2a-d26f-173c7b78cbbb"
      },
      "execution_count": 165,
      "outputs": [
        {
          "output_type": "error",
          "ename": "FileNotFoundError",
          "evalue": "ignored",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mFileNotFoundError\u001b[0m                         Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-165-bdfcc7b6b60a>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mfrom\u001b[0m \u001b[0mmatplotlib\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpyplot\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      3\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 4\u001b[0;31m \u001b[0mblue_cat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'blue_cat.jpg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      5\u001b[0m \u001b[0mgreen_cat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m'green_cat.jpg'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0mred_cat\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mplt\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"red_cat.jpg\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/matplotlib/pyplot.py\u001b[0m in \u001b[0;36mimread\u001b[0;34m(fname, format)\u001b[0m\n\u001b[1;32m   2156\u001b[0m \u001b[0;34m@\u001b[0m\u001b[0m_copy_docstring_and_deprecators\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2157\u001b[0m \u001b[0;32mdef\u001b[0m \u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mNone\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2158\u001b[0;31m     \u001b[0;32mreturn\u001b[0m \u001b[0mmatplotlib\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2159\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2160\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/matplotlib/image.py\u001b[0m in \u001b[0;36mimread\u001b[0;34m(fname, format)\u001b[0m\n\u001b[1;32m   1558\u001b[0m                     \u001b[0mresponse\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mBytesIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1559\u001b[0m                 \u001b[0;32mreturn\u001b[0m \u001b[0mimread\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresponse\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mext\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1560\u001b[0;31m     \u001b[0;32mwith\u001b[0m \u001b[0mimg_open\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfname\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mimage\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1561\u001b[0m         return (_pil_png_to_float_array(image)\n\u001b[1;32m   1562\u001b[0m                 \u001b[0;32mif\u001b[0m \u001b[0misinstance\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mimage\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mPIL\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPngImagePlugin\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mPngImageFile\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32melse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;32m/usr/local/lib/python3.9/dist-packages/PIL/Image.py\u001b[0m in \u001b[0;36mopen\u001b[0;34m(fp, mode, formats)\u001b[0m\n\u001b[1;32m   2973\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2974\u001b[0m     \u001b[0;32mif\u001b[0m \u001b[0mfilename\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2975\u001b[0;31m         \u001b[0mfp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mbuiltins\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mopen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfilename\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"rb\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2976\u001b[0m         \u001b[0mexclusive_fp\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mTrue\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2977\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mFileNotFoundError\u001b[0m: [Errno 2] No such file or directory: 'blue_cat.jpg'"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np \n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "red = plt.imread('red_kitty.png')\n",
        "green = plt.imread('green_kitty.png')\n",
        "blue = plt.imread('blue_kitty.png')\n",
        "\n",
        "green = np.flip(green, axis=0)\n",
        "green = np.flip(green, axis=1)\n",
        "blue = np.flip(blue, axis=0)\n",
        "blue = np.flip(blue, axis=1)\n",
        "\n",
        "rgb_kitty = np.dstack((red, green, blue))\n",
        "\n",
        "plt.imshow(rgb_kitty)\n",
        "plt.show()"
      ],
      "metadata": {
        "id": "hvknA-7ooMhc"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np \n",
        "from matplotlib import pyplot as plt\n",
        "\n",
        "red = plt.imread('red_cat.png')\n",
        "green = plt.imread('green_cat.png')\n",
        "blue = plt.imread('blue_cat.png')\n",
        "\n",
        "green = np.flip(green, axis=0)\n",
        "green = np.flip(green, axis=1)\n",
        "blue = np.flip(blue, axis=0)\n",
        "blue = np.flip(blue, axis=1)\n",
        "\n",
        "message = \"\"\n",
        "for i in range(0, green.shape[1], 8):\n",
        "  message += chr(green[10][i])\n",
        "print(\"The message hidden in the green channel is:\", message)\n"
      ],
      "metadata": {
        "id": "2j542kr4pZVD"
      },
      "execution_count": null,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "toc_visible": true,
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.6.7"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}